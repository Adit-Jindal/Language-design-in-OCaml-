# 1 "lexer.mll"
 
    open Parser        (*The type token is defined in parser.mli*)
    exception Eof

# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\223\255\224\255\225\255\002\000\000\000\001\000\003\000\
    \233\255\234\255\235\255\236\255\237\255\238\255\239\255\240\255\
    \241\255\001\000\243\255\045\000\245\255\246\255\247\255\248\255\
    \000\000\000\000\061\000\106\000\254\255\255\255\116\000\126\000\
    \006\000\000\000\230\255\000\000\227\255\048\000\226\255\000\000\
    \242\255\232\255\231\255\000\000\011\000\229\255\228\255\049\000\
    \254\255\050\000\051\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\011\000\255\255\255\255\255\255\255\255\
    \006\000\005\000\004\000\002\000\255\255\255\255\255\255\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\001\000\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\048\000\
    \000\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\029\000\028\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \015\000\014\000\021\000\023\000\009\000\022\000\020\000\019\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\004\000\008\000\003\000\007\000\002\000\046\000\
    \041\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\013\000\037\000\012\000\016\000\038\000\
    \049\000\050\000\051\000\000\000\017\000\005\000\024\000\042\000\
    \032\000\006\000\039\000\033\000\043\000\040\000\034\000\035\000\
    \045\000\000\000\036\000\044\000\025\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\011\000\018\000\010\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \030\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\019\000\000\000\000\000\037\000\
    \047\000\049\000\050\000\255\255\000\000\000\000\000\000\006\000\
    \025\000\000\000\017\000\032\000\005\000\039\000\033\000\024\000\
    \044\000\255\255\035\000\043\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \027\000\255\255\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\047\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 7 "lexer.mll"
                                        ( token lexbuf )
# 152 "lexer.ml"

  | 1 ->
# 8 "lexer.mll"
                                        ( EOL )
# 157 "lexer.ml"

  | 2 ->
let
# 9 "lexer.mll"
                    lxm
# 163 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 9 "lexer.mll"
                                        ( INT(int_of_string lxm) )
# 167 "lexer.ml"

  | 3 ->
let
# 10 "lexer.mll"
                                   lxm
# 173 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 10 "lexer.mll"
                                        ( FLOAT(float_of_string lxm) )
# 177 "lexer.ml"

  | 4 ->
let
# 11 "lexer.mll"
                    lxm
# 183 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 11 "lexer.mll"
                                        ( VAR(lxm) )
# 187 "lexer.ml"

  | 5 ->
# 12 "lexer.mll"
                                        ( BOOL (true) )
# 192 "lexer.ml"

  | 6 ->
# 13 "lexer.mll"
                                        ( BOOL (false) )
# 197 "lexer.ml"

  | 7 ->
# 14 "lexer.mll"
                                        ( PLUS )
# 202 "lexer.ml"

  | 8 ->
# 15 "lexer.mll"
                                        ( MINUS )
# 207 "lexer.ml"

  | 9 ->
# 16 "lexer.mll"
                                        ( TIMES )
# 212 "lexer.ml"

  | 10 ->
# 17 "lexer.mll"
                                        ( DOT )
# 217 "lexer.ml"

  | 11 ->
# 18 "lexer.mll"
                                        ( DIV )
# 222 "lexer.ml"

  | 12 ->
# 19 "lexer.mll"
                                        ( MOD )
# 227 "lexer.ml"

  | 13 ->
# 20 "lexer.mll"
                                        ( DIM )
# 232 "lexer.ml"

  | 14 ->
# 21 "lexer.mll"
                                        ( ANGLE )
# 237 "lexer.ml"

  | 15 ->
# 22 "lexer.mll"
                                        ( LPAREN )
# 242 "lexer.ml"

  | 16 ->
# 23 "lexer.mll"
                                        ( RPAREN )
# 247 "lexer.ml"

  | 17 ->
# 24 "lexer.mll"
                                        ( LBKT )
# 252 "lexer.ml"

  | 18 ->
# 25 "lexer.mll"
                                        ( RBKT )
# 257 "lexer.ml"

  | 19 ->
# 26 "lexer.mll"
                                        ( LBRACES )
# 262 "lexer.ml"

  | 20 ->
# 27 "lexer.mll"
                                        ( RBRACES )
# 267 "lexer.ml"

  | 21 ->
# 28 "lexer.mll"
                                        ( COMMA )
# 272 "lexer.ml"

  | 22 ->
# 29 "lexer.mll"
                                        ( SEMICOLON )
# 277 "lexer.ml"

  | 23 ->
# 30 "lexer.mll"
                                        ( EQUALITY )
# 282 "lexer.ml"

  | 24 ->
# 31 "lexer.mll"
                                        ( IF )
# 287 "lexer.ml"

  | 25 ->
# 32 "lexer.mll"
                                        ( THEN )
# 292 "lexer.ml"

  | 26 ->
# 33 "lexer.mll"
                                        ( ELSE )
# 297 "lexer.ml"

  | 27 ->
# 34 "lexer.mll"
                                        ( ASSIGN )
# 302 "lexer.ml"

  | 28 ->
# 35 "lexer.mll"
                                        ( FOR )
# 307 "lexer.ml"

  | 29 ->
# 36 "lexer.mll"
                                        ( comment lexbuf )
# 312 "lexer.ml"

  | 30 ->
# 39 "lexer.mll"
                                        ( LESS )
# 317 "lexer.ml"

  | 31 ->
# 40 "lexer.mll"
                                        ( MORE )
# 322 "lexer.ml"

  | 32 ->
# 42 "lexer.mll"
                                        ( raise Eof )
# 327 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 47
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 45 "lexer.mll"
                                      ( token lexbuf )
# 339 "lexer.ml"

  | 1 ->
# 46 "lexer.mll"
                                        ( comment lexbuf )
# 344 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

