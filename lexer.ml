# 1 "lexer.mll"
 
    open Parser        (*The type token is defined in parser.mli*)
    exception Eof

# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\217\255\218\255\220\255\221\255\222\255\223\255\000\000\
    \000\000\002\000\000\000\001\000\003\000\233\255\234\255\235\255\
    \236\255\237\255\238\255\239\255\240\255\241\255\001\000\243\255\
    \045\000\245\255\246\255\247\255\248\255\004\000\003\000\061\000\
    \106\000\254\255\255\255\116\000\126\000\008\000\000\000\230\255\
    \003\000\227\255\049\000\226\255\009\000\242\255\232\255\008\000\
    \231\255\004\000\006\000\057\000\057\000\219\255\038\000\083\000\
    \229\255\228\255\080\000\078\000\086\000\225\255\083\000\079\000\
    \074\000\224\255\052\000\254\255\144\000\145\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \011\000\255\255\255\255\255\255\255\255\006\000\005\000\004\000\
    \002\000\255\255\255\255\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\255\255\000\000\255\255\000\000\000\000\255\255\
    \000\000\255\255\255\255\255\255\052\000\000\000\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\067\000\000\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\034\000\033\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \020\000\019\000\026\000\028\000\014\000\027\000\025\000\024\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\009\000\013\000\006\000\012\000\005\000\057\000\
    \046\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\018\000\042\000\017\000\021\000\004\000\
    \043\000\052\000\053\000\068\000\022\000\010\000\029\000\048\000\
    \058\000\011\000\044\000\037\000\054\000\038\000\039\000\047\000\
    \007\000\002\000\062\000\040\000\030\000\041\000\045\000\008\000\
    \049\000\050\000\051\000\016\000\023\000\015\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \035\000\055\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \056\000\059\000\060\000\061\000\063\000\064\000\065\000\069\000\
    \070\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\
    \042\000\051\000\052\000\066\000\000\000\000\000\000\000\011\000\
    \008\000\000\000\022\000\030\000\010\000\037\000\038\000\011\000\
    \000\000\000\000\007\000\029\000\000\000\040\000\044\000\000\000\
    \047\000\049\000\050\000\000\000\000\000\000\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \032\000\054\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \055\000\058\000\059\000\060\000\062\000\063\000\064\000\068\000\
    \069\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\066\000\255\255\255\255\255\255\
    \255\255\052\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 7 "lexer.mll"
                                        ( token lexbuf )
# 164 "lexer.ml"

  | 1 ->
# 8 "lexer.mll"
                                        ( EOL )
# 169 "lexer.ml"

  | 2 ->
let
# 9 "lexer.mll"
                    lxm
# 175 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 9 "lexer.mll"
                                        ( INT(int_of_string lxm) )
# 179 "lexer.ml"

  | 3 ->
let
# 10 "lexer.mll"
                                   lxm
# 185 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 10 "lexer.mll"
                                        ( FLOAT(float_of_string lxm) )
# 189 "lexer.ml"

  | 4 ->
let
# 11 "lexer.mll"
                    lxm
# 195 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 11 "lexer.mll"
                                        ( VAR(lxm) )
# 199 "lexer.ml"

  | 5 ->
# 12 "lexer.mll"
                                        ( BOOL (true) )
# 204 "lexer.ml"

  | 6 ->
# 13 "lexer.mll"
                                        ( BOOL (false) )
# 209 "lexer.ml"

  | 7 ->
# 14 "lexer.mll"
                                        ( PLUS )
# 214 "lexer.ml"

  | 8 ->
# 15 "lexer.mll"
                                        ( MINUS )
# 219 "lexer.ml"

  | 9 ->
# 16 "lexer.mll"
                                        ( TIMES )
# 224 "lexer.ml"

  | 10 ->
# 17 "lexer.mll"
                                        ( DOT )
# 229 "lexer.ml"

  | 11 ->
# 18 "lexer.mll"
                                        ( DIV )
# 234 "lexer.ml"

  | 12 ->
# 19 "lexer.mll"
                                        ( MOD )
# 239 "lexer.ml"

  | 13 ->
# 20 "lexer.mll"
                                        ( DIM )
# 244 "lexer.ml"

  | 14 ->
# 21 "lexer.mll"
                                        ( ANGLE )
# 249 "lexer.ml"

  | 15 ->
# 22 "lexer.mll"
                                        ( LPAREN )
# 254 "lexer.ml"

  | 16 ->
# 23 "lexer.mll"
                                        ( RPAREN )
# 259 "lexer.ml"

  | 17 ->
# 24 "lexer.mll"
                                        ( LBKT )
# 264 "lexer.ml"

  | 18 ->
# 25 "lexer.mll"
                                        ( RBKT )
# 269 "lexer.ml"

  | 19 ->
# 26 "lexer.mll"
                                        ( LBRACES )
# 274 "lexer.ml"

  | 20 ->
# 27 "lexer.mll"
                                        ( RBRACES )
# 279 "lexer.ml"

  | 21 ->
# 28 "lexer.mll"
                                        ( COMMA )
# 284 "lexer.ml"

  | 22 ->
# 29 "lexer.mll"
                                        ( SEMICOLON )
# 289 "lexer.ml"

  | 23 ->
# 30 "lexer.mll"
                                        ( EQUALITY )
# 294 "lexer.ml"

  | 24 ->
# 31 "lexer.mll"
                                        ( IF )
# 299 "lexer.ml"

  | 25 ->
# 32 "lexer.mll"
                                        ( THEN )
# 304 "lexer.ml"

  | 26 ->
# 33 "lexer.mll"
                                        ( ELSE )
# 309 "lexer.ml"

  | 27 ->
# 34 "lexer.mll"
                                        ( ASSIGN )
# 314 "lexer.ml"

  | 28 ->
# 35 "lexer.mll"
                                        ( FOR )
# 319 "lexer.ml"

  | 29 ->
# 36 "lexer.mll"
                                        ( comment lexbuf )
# 324 "lexer.ml"

  | 30 ->
# 37 "lexer.mll"
                                        ( WHILE )
# 329 "lexer.ml"

  | 31 ->
# 38 "lexer.mll"
                                        ( PRINT )
# 334 "lexer.ml"

  | 32 ->
# 39 "lexer.mll"
                                        ( LESS )
# 339 "lexer.ml"

  | 33 ->
# 40 "lexer.mll"
                                        ( MORE )
# 344 "lexer.ml"

  | 34 ->
# 41 "lexer.mll"
                                        ( UNDSC )
# 349 "lexer.ml"

  | 35 ->
# 42 "lexer.mll"
                                        ( PRIME )
# 354 "lexer.ml"

  | 36 ->
let
# 43 "lexer.mll"
                                lxm
# 360 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 43 "lexer.mll"
                                        ( INPUT (String.sub lxm 6 ((String.length lxm) - 7)) )
# 364 "lexer.ml"

  | 37 ->
# 44 "lexer.mll"
                                        ( QUIT )
# 369 "lexer.ml"

  | 38 ->
# 45 "lexer.mll"
                                        ( raise Eof )
# 374 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 66
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 48 "lexer.mll"
                                      ( token lexbuf )
# 386 "lexer.ml"

  | 1 ->
# 49 "lexer.mll"
                                        ( comment lexbuf )
# 391 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

