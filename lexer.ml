# 1 "lexer.mll"
 
open Parser        (* The type token is defined in parser.mli *)
exception Eof

# 7 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\226\255\001\000\000\000\001\000\002\000\233\255\234\255\
    \235\255\236\255\237\255\238\255\239\255\240\255\241\255\001\000\
    \243\255\244\255\245\255\246\255\247\255\248\255\000\000\000\000\
    \061\000\106\000\254\255\255\255\116\000\006\000\000\000\230\255\
    \000\000\227\255\000\000\242\255\232\255\231\255\000\000\011\000\
    \229\255\228\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\006\000\005\000\
    \004\000\002\000\255\255\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\027\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \027\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \013\000\012\000\019\000\021\000\007\000\020\000\018\000\017\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\002\000\006\000\000\000\005\000\041\000\036\000\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\011\000\000\000\010\000\014\000\000\000\
    \000\000\000\000\000\000\000\000\015\000\003\000\022\000\037\000\
    \029\000\004\000\034\000\030\000\038\000\035\000\031\000\032\000\
    \040\000\000\000\033\000\039\000\023\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\009\000\016\000\008\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \028\000\000\000\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\002\000\005\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\004\000\
    \023\000\000\000\015\000\029\000\003\000\034\000\030\000\022\000\
    \039\000\255\255\032\000\038\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \025\000\255\255\025\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\028\000\028\000\028\000\028\000\
    \028\000\028\000\028\000\028\000\028\000\028\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 6 "lexer.mll"
                                        ( token lexbuf )
# 147 "lexer.ml"

  | 1 ->
# 7 "lexer.mll"
                                        ( EOL )
# 152 "lexer.ml"

  | 2 ->
let
# 8 "lexer.mll"
                    lxm
# 158 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 8 "lexer.mll"
                                        ( INT(int_of_string lxm) )
# 162 "lexer.ml"

  | 3 ->
let
# 9 "lexer.mll"
                                   lxm
# 168 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 9 "lexer.mll"
                                        ( FLOAT(float_of_string lxm) )
# 172 "lexer.ml"

  | 4 ->
let
# 10 "lexer.mll"
                    lxm
# 178 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 10 "lexer.mll"
                                        ( VAR(lxm) )
# 182 "lexer.ml"

  | 5 ->
# 11 "lexer.mll"
                                        ( BOOL (true) )
# 187 "lexer.ml"

  | 6 ->
# 12 "lexer.mll"
                                        ( BOOL (false) )
# 192 "lexer.ml"

  | 7 ->
# 13 "lexer.mll"
                                        ( PLUS )
# 197 "lexer.ml"

  | 8 ->
# 14 "lexer.mll"
                                        ( MINUS )
# 202 "lexer.ml"

  | 9 ->
# 15 "lexer.mll"
                                        ( TIMES )
# 207 "lexer.ml"

  | 10 ->
# 16 "lexer.mll"
                                        ( DOT )
# 212 "lexer.ml"

  | 11 ->
# 17 "lexer.mll"
                                        ( DIV )
# 217 "lexer.ml"

  | 12 ->
# 18 "lexer.mll"
                                        ( MOD )
# 222 "lexer.ml"

  | 13 ->
# 19 "lexer.mll"
                                        ( DIM )
# 227 "lexer.ml"

  | 14 ->
# 20 "lexer.mll"
                                        ( ANGLE )
# 232 "lexer.ml"

  | 15 ->
# 21 "lexer.mll"
                                        ( LPAREN )
# 237 "lexer.ml"

  | 16 ->
# 22 "lexer.mll"
                                        ( RPAREN )
# 242 "lexer.ml"

  | 17 ->
# 23 "lexer.mll"
                                        ( LBKT )
# 247 "lexer.ml"

  | 18 ->
# 24 "lexer.mll"
                                        ( RBKT )
# 252 "lexer.ml"

  | 19 ->
# 25 "lexer.mll"
                                        ( LBRACES )
# 257 "lexer.ml"

  | 20 ->
# 26 "lexer.mll"
                                        ( RBRACES )
# 262 "lexer.ml"

  | 21 ->
# 27 "lexer.mll"
                                        ( COMMA )
# 267 "lexer.ml"

  | 22 ->
# 28 "lexer.mll"
                                        ( SEMICOLON )
# 272 "lexer.ml"

  | 23 ->
# 29 "lexer.mll"
                                        ( EQUALITY )
# 277 "lexer.ml"

  | 24 ->
# 30 "lexer.mll"
                                        ( IF )
# 282 "lexer.ml"

  | 25 ->
# 31 "lexer.mll"
                                        ( THEN )
# 287 "lexer.ml"

  | 26 ->
# 32 "lexer.mll"
                                        ( ELSE )
# 292 "lexer.ml"

  | 27 ->
# 33 "lexer.mll"
                                        ( ASSIGN )
# 297 "lexer.ml"

  | 28 ->
# 34 "lexer.mll"
                                        ( FOR )
# 302 "lexer.ml"

  | 29 ->
# 35 "lexer.mll"
                                        ( raise Eof )
# 307 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

