type token =
  | INT of (
# 1 "parser.mly"
        int
# 6 "parser.ml"
)
  | FLOAT of (
# 2 "parser.mly"
        float
# 11 "parser.ml"
)
  | BOOL of (
# 3 "parser.mly"
        bool
# 16 "parser.ml"
)
  | VAR of (
# 4 "parser.mly"
        string
# 21 "parser.ml"
)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LPAREN
  | RPAREN
  | LBRACES
  | RBRACES
  | UNDSC
  | LBKT
  | RBKT
  | COMMA
  | DOT
  | MOD
  | SEMICOLON
  | EQUALITY
  | LESS
  | MORE
  | EOL
  | DIM
  | ANGLE
  | PRIME
  | PRINT
  | QUIT
  | IF
  | THEN
  | ELSE
  | ASSIGN
  | FOR
  | WHILE
  | INPUT of (
# 11 "parser.mly"
        string
# 56 "parser.ml"
)

open Parsing
let _ = parse_error;;
let yytransl_const = [|
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* TIMES *);
  264 (* DIV *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* LBRACES *);
  268 (* RBRACES *);
  269 (* UNDSC *);
  270 (* LBKT *);
  271 (* RBKT *);
  272 (* COMMA *);
  273 (* DOT *);
  274 (* MOD *);
  275 (* SEMICOLON *);
  276 (* EQUALITY *);
  277 (* LESS *);
  278 (* MORE *);
  279 (* EOL *);
  280 (* DIM *);
  281 (* ANGLE *);
  282 (* PRIME *);
  283 (* PRINT *);
  284 (* QUIT *);
  285 (* IF *);
  286 (* THEN *);
  287 (* ELSE *);
  288 (* ASSIGN *);
  289 (* FOR *);
  290 (* WHILE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* VAR *);
  291 (* INPUT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\003\000\003\000\004\000\004\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\006\000\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\002\000\003\000\005\000\003\000\006\000\003\000\008\000\
\008\000\009\000\005\000\003\000\002\000\004\000\001\000\001\000\
\001\000\003\000\001\000\003\000\003\000\001\000\001\000\001\000\
\001\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\003\000\002\000\003\000\005\000\003\000\
\006\000\003\000\008\000\008\000\009\000\005\000\003\000\002\000\
\001\000\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\004\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\031\000\069\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\001\000\000\000\029\000\000\000\
\002\000\021\000\000\000\028\000\000\000\019\000\000\000\015\000\
\000\000\000\000\000\000\038\000\039\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\030\000\000\000\000\000\000\000\051\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\000\000\000\000\020\000\000\000\
\000\000\000\000\037\000\056\000\000\000\063\000\000\000\054\000\
\000\000\050\000\000\000\000\000\000\000\000\000\000\000\045\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\
\000\000\000\000\000\000\000\000\000\000\060\000\000\000"

let yydgoto = "\002\000\
\020\000\084\000\029\000\026\000\144\000\099\000\096\000"

let yysindex = "\015\000\
\005\000\000\000\000\000\000\000\000\000\225\254\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\015\255\000\000\005\000\
\023\255\025\255\000\000\000\000\021\003\005\000\000\000\043\003\
\247\004\001\255\065\003\087\003\014\255\109\003\253\254\005\000\
\028\001\005\000\108\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\191\255\005\000\000\000\005\000\000\000\253\254\
\000\000\000\000\005\000\000\000\005\000\000\000\005\000\000\000\
\131\003\005\000\138\003\000\000\000\000\000\000\011\255\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\051\255\
\069\255\160\003\040\255\040\255\000\000\000\000\167\003\020\255\
\050\003\005\000\050\003\050\003\020\255\247\004\189\003\247\004\
\000\000\086\255\108\000\108\000\000\000\211\003\013\005\032\255\
\233\003\255\003\059\255\021\004\049\005\035\001\005\000\108\000\
\108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
\040\000\108\000\108\000\000\000\005\000\028\004\000\000\005\000\
\050\004\049\005\000\000\000\000\108\000\000\000\108\000\000\000\
\108\000\000\000\108\000\072\004\094\004\097\255\097\255\000\000\
\000\000\101\004\049\005\092\255\094\003\108\000\094\003\094\003\
\092\255\123\004\005\000\253\254\108\000\013\005\145\004\013\005\
\131\255\108\000\108\000\108\000\167\004\017\255\020\005\189\004\
\000\000\108\000\196\004\049\005\218\004\108\000\005\000\226\255\
\108\000\049\005\108\000\038\255\042\005\253\254\000\000\049\005\
\240\004\108\000\074\000\108\000\049\005\000\000\049\005"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\060\255\000\000\000\000\119\255\000\000\000\000\005\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\028\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\165\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\188\000\211\000\000\000\000\000\000\000\046\255\
\123\001\000\000\146\001\169\001\054\001\061\255\000\000\126\255\
\000\000\000\000\000\000\000\000\000\000\000\000\101\255\000\000\
\000\000\139\255\000\000\000\000\051\002\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\074\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\234\000\001\001\000\000\
\000\000\000\000\097\002\077\001\192\001\000\000\215\001\238\001\
\100\001\000\000\000\000\120\002\000\000\102\255\000\000\143\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\143\002\000\000\000\000\000\000\000\000\
\000\000\166\002\000\000\000\000\000\000\189\002\000\000\212\002\
\000\000\000\000\000\000\000\000\235\002\000\000\002\003"

let yygindex = "\000\000\
\000\000\255\255\000\000\000\000\018\000\000\000\000\000"

let yytablesize = 1611
let yytable = "\021\000\
\022\000\036\000\037\000\038\000\039\000\023\000\024\000\025\000\
\027\000\028\000\030\000\031\000\050\000\041\000\033\000\001\000\
\042\000\043\000\044\000\051\000\048\000\046\000\047\000\032\000\
\036\000\037\000\038\000\039\000\054\000\055\000\057\000\034\000\
\059\000\035\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\083\000\092\000\124\000\085\000\047\000\038\000\039\000\
\167\000\086\000\125\000\087\000\074\000\088\000\007\000\007\000\
\090\000\007\000\007\000\103\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\178\000\007\000\035\000\
\036\000\128\000\129\000\007\000\007\000\104\000\035\000\036\000\
\118\000\093\000\094\000\095\000\097\000\098\000\100\000\101\000\
\102\000\000\000\036\000\037\000\038\000\039\000\040\000\000\000\
\105\000\106\000\107\000\108\000\000\000\132\000\041\000\107\000\
\108\000\042\000\043\000\044\000\121\000\122\000\046\000\047\000\
\067\000\068\000\000\000\146\000\120\000\116\000\148\000\067\000\
\068\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\141\000\143\000\000\000\145\000\033\000\033\000\105\000\
\106\000\107\000\108\000\109\000\034\000\034\000\150\000\000\000\
\151\000\159\000\152\000\111\000\153\000\000\000\112\000\113\000\
\114\000\065\000\065\000\115\000\116\000\066\000\066\000\157\000\
\000\000\162\000\000\000\000\000\000\000\174\000\160\000\000\000\
\000\000\000\000\000\000\163\000\164\000\165\000\000\000\000\000\
\000\000\000\000\000\000\170\000\000\000\000\000\000\000\173\000\
\000\000\000\000\176\000\000\000\177\000\000\000\000\000\003\000\
\004\000\005\000\006\000\181\000\007\000\183\000\000\000\008\000\
\000\000\009\000\000\000\010\000\011\000\000\000\000\000\000\000\
\012\000\000\000\000\000\082\000\000\000\000\000\013\000\000\000\
\000\000\014\000\015\000\016\000\000\000\000\000\000\000\017\000\
\018\000\019\000\003\000\004\000\005\000\006\000\000\000\007\000\
\000\000\000\000\008\000\000\000\009\000\000\000\010\000\011\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\175\000\
\000\000\013\000\000\000\000\000\014\000\015\000\016\000\000\000\
\000\000\000\000\017\000\018\000\019\000\003\000\004\000\005\000\
\006\000\000\000\007\000\000\000\000\000\008\000\000\000\009\000\
\000\000\010\000\011\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\014\000\
\015\000\016\000\000\000\000\000\000\000\017\000\018\000\019\000\
\060\000\061\000\062\000\063\000\000\000\064\000\000\000\000\000\
\065\000\000\000\066\000\000\000\067\000\068\000\000\000\000\000\
\000\000\069\000\000\000\000\000\142\000\000\000\000\000\070\000\
\000\000\000\000\000\000\000\000\071\000\000\000\000\000\000\000\
\072\000\073\000\060\000\061\000\062\000\063\000\000\000\064\000\
\000\000\000\000\065\000\000\000\066\000\000\000\067\000\068\000\
\000\000\000\000\000\000\069\000\000\000\000\000\000\000\182\000\
\000\000\070\000\000\000\000\000\000\000\000\000\071\000\000\000\
\000\000\000\000\072\000\073\000\060\000\061\000\062\000\063\000\
\000\000\064\000\000\000\000\000\065\000\000\000\066\000\000\000\
\067\000\068\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\071\000\000\000\000\000\000\000\072\000\073\000\006\000\006\000\
\006\000\006\000\006\000\006\000\000\000\006\000\006\000\000\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\000\000\006\000\006\000\000\000\000\000\000\000\006\000\
\006\000\041\000\041\000\041\000\041\000\041\000\041\000\000\000\
\041\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\000\000\041\000\041\000\000\000\
\008\000\008\000\041\000\041\000\008\000\008\000\000\000\008\000\
\008\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\000\000\008\000\008\000\000\000\009\000\
\009\000\008\000\008\000\009\000\009\000\000\000\009\000\009\000\
\000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\009\000\009\000\000\000\043\000\043\000\
\009\000\009\000\043\000\043\000\000\000\043\000\043\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\000\000\043\000\043\000\000\000\044\000\044\000\043\000\
\043\000\044\000\044\000\000\000\044\000\044\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\000\000\044\000\044\000\000\000\000\000\000\000\044\000\044\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\105\000\
\106\000\107\000\108\000\109\000\041\000\000\000\000\000\042\000\
\043\000\044\000\000\000\111\000\046\000\047\000\112\000\113\000\
\114\000\058\000\000\000\115\000\116\000\000\000\017\000\017\000\
\131\000\017\000\017\000\000\000\017\000\017\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\000\000\017\000\000\000\
\000\000\000\000\000\000\017\000\017\000\042\000\042\000\000\000\
\042\000\042\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\000\000\042\000\000\000\000\000\
\000\000\000\000\042\000\042\000\052\000\052\000\000\000\052\000\
\052\000\000\000\052\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\000\000\052\000\000\000\000\000\000\000\
\000\000\052\000\052\000\012\000\012\000\000\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
\012\000\012\000\013\000\013\000\000\000\013\000\013\000\000\000\
\013\000\013\000\000\000\013\000\013\000\013\000\013\000\013\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\013\000\014\000\014\000\000\000\014\000\014\000\000\000\014\000\
\014\000\000\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\014\000\
\047\000\047\000\000\000\047\000\047\000\000\000\047\000\047\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\000\000\
\000\000\000\000\000\000\000\000\000\000\047\000\047\000\048\000\
\048\000\000\000\048\000\048\000\000\000\048\000\048\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\048\000\048\000\049\000\049\000\
\000\000\049\000\049\000\000\000\049\000\049\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\049\000\018\000\018\000\000\000\
\018\000\018\000\000\000\018\000\018\000\000\000\018\000\018\000\
\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\018\000\023\000\023\000\000\000\023\000\
\023\000\000\000\023\000\023\000\000\000\023\000\023\000\000\000\
\000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
\000\000\023\000\023\000\053\000\053\000\000\000\053\000\053\000\
\000\000\053\000\053\000\000\000\053\000\053\000\000\000\000\000\
\000\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\053\000\053\000\058\000\058\000\000\000\058\000\058\000\000\000\
\058\000\058\000\000\000\058\000\058\000\000\000\000\000\000\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\058\000\
\058\000\027\000\027\000\000\000\027\000\027\000\000\000\027\000\
\027\000\000\000\027\000\027\000\000\000\000\000\000\000\027\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\027\000\
\022\000\022\000\000\000\022\000\022\000\000\000\022\000\022\000\
\000\000\022\000\022\000\000\000\000\000\000\000\022\000\000\000\
\000\000\000\000\000\000\000\000\000\000\022\000\022\000\062\000\
\062\000\000\000\062\000\062\000\000\000\062\000\062\000\000\000\
\062\000\062\000\000\000\000\000\000\000\062\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\062\000\057\000\057\000\
\000\000\057\000\057\000\000\000\057\000\057\000\000\000\057\000\
\057\000\000\000\000\000\000\000\057\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\057\000\024\000\024\000\000\000\
\024\000\024\000\000\000\024\000\024\000\000\000\024\000\024\000\
\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\
\000\000\000\000\024\000\024\000\026\000\026\000\000\000\026\000\
\026\000\000\000\026\000\026\000\000\000\026\000\026\000\000\000\
\000\000\000\000\026\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\026\000\059\000\059\000\000\000\059\000\059\000\
\000\000\059\000\059\000\000\000\059\000\059\000\000\000\000\000\
\000\000\059\000\000\000\000\000\000\000\000\000\000\000\000\000\
\059\000\059\000\061\000\061\000\000\000\061\000\061\000\000\000\
\061\000\061\000\000\000\061\000\061\000\000\000\000\000\000\000\
\061\000\036\000\037\000\038\000\039\000\040\000\000\000\061\000\
\061\000\000\000\000\000\000\000\000\000\041\000\000\000\000\000\
\042\000\043\000\044\000\045\000\000\000\046\000\047\000\036\000\
\037\000\038\000\039\000\040\000\049\000\000\000\036\000\037\000\
\038\000\039\000\000\000\041\000\000\000\000\000\042\000\043\000\
\044\000\000\000\041\000\046\000\047\000\036\000\037\000\038\000\
\039\000\040\000\046\000\047\000\000\000\052\000\000\000\000\000\
\000\000\041\000\000\000\000\000\042\000\043\000\044\000\000\000\
\000\000\046\000\047\000\036\000\037\000\038\000\039\000\040\000\
\000\000\000\000\105\000\106\000\107\000\108\000\000\000\041\000\
\000\000\053\000\042\000\043\000\044\000\000\000\111\000\046\000\
\047\000\036\000\037\000\038\000\039\000\040\000\115\000\116\000\
\000\000\000\000\000\000\000\000\000\000\041\000\056\000\000\000\
\042\000\043\000\044\000\000\000\000\000\046\000\047\000\036\000\
\037\000\038\000\039\000\040\000\089\000\000\000\036\000\037\000\
\038\000\039\000\040\000\041\000\000\000\000\000\042\000\043\000\
\044\000\091\000\041\000\046\000\047\000\042\000\043\000\044\000\
\000\000\000\000\046\000\047\000\105\000\106\000\107\000\108\000\
\109\000\110\000\000\000\036\000\037\000\038\000\039\000\040\000\
\111\000\000\000\000\000\112\000\113\000\114\000\117\000\041\000\
\115\000\116\000\042\000\043\000\044\000\000\000\000\000\046\000\
\047\000\036\000\037\000\038\000\039\000\040\000\000\000\000\000\
\000\000\000\000\000\000\119\000\000\000\041\000\000\000\000\000\
\042\000\043\000\044\000\000\000\000\000\046\000\047\000\105\000\
\106\000\107\000\108\000\109\000\123\000\000\000\000\000\000\000\
\000\000\000\000\000\000\111\000\000\000\000\000\112\000\113\000\
\114\000\000\000\000\000\115\000\116\000\105\000\106\000\107\000\
\108\000\109\000\000\000\000\000\000\000\126\000\000\000\000\000\
\000\000\111\000\000\000\000\000\112\000\113\000\114\000\000\000\
\000\000\115\000\116\000\105\000\106\000\107\000\108\000\109\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\000\
\000\000\127\000\112\000\113\000\114\000\000\000\000\000\115\000\
\116\000\105\000\106\000\107\000\108\000\109\000\000\000\000\000\
\036\000\037\000\038\000\039\000\040\000\111\000\130\000\000\000\
\112\000\113\000\114\000\147\000\041\000\115\000\116\000\042\000\
\043\000\044\000\000\000\000\000\046\000\047\000\105\000\106\000\
\107\000\108\000\109\000\000\000\000\000\000\000\000\000\000\000\
\000\000\149\000\111\000\000\000\000\000\112\000\113\000\114\000\
\000\000\000\000\115\000\116\000\036\000\037\000\038\000\039\000\
\040\000\000\000\000\000\000\000\000\000\000\000\000\000\154\000\
\041\000\000\000\000\000\042\000\043\000\044\000\000\000\000\000\
\046\000\047\000\105\000\106\000\107\000\108\000\109\000\155\000\
\000\000\105\000\106\000\107\000\108\000\109\000\111\000\000\000\
\000\000\112\000\113\000\114\000\156\000\111\000\115\000\116\000\
\112\000\113\000\114\000\000\000\000\000\115\000\116\000\036\000\
\037\000\038\000\039\000\040\000\158\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\000\000\000\000\042\000\043\000\
\044\000\000\000\000\000\046\000\047\000\105\000\106\000\107\000\
\108\000\109\000\000\000\000\000\000\000\000\000\000\000\161\000\
\000\000\111\000\000\000\000\000\112\000\113\000\114\000\000\000\
\000\000\115\000\116\000\105\000\106\000\107\000\108\000\109\000\
\000\000\000\000\000\000\000\000\000\000\000\000\166\000\111\000\
\000\000\000\000\112\000\113\000\114\000\000\000\000\000\115\000\
\116\000\105\000\106\000\107\000\108\000\109\000\169\000\000\000\
\105\000\106\000\107\000\108\000\109\000\111\000\000\000\000\000\
\112\000\113\000\114\000\171\000\111\000\115\000\116\000\112\000\
\113\000\114\000\000\000\000\000\115\000\116\000\105\000\106\000\
\107\000\108\000\109\000\172\000\000\000\000\000\000\000\000\000\
\000\000\000\000\111\000\000\000\000\000\112\000\113\000\114\000\
\000\000\000\000\115\000\116\000\105\000\106\000\107\000\108\000\
\109\000\180\000\000\000\036\000\037\000\038\000\039\000\040\000\
\111\000\000\000\000\000\112\000\113\000\114\000\000\000\041\000\
\115\000\116\000\042\000\043\000\044\000\000\000\000\000\046\000\
\047\000\105\000\106\000\107\000\108\000\109\000\000\000\000\000\
\036\000\037\000\038\000\039\000\040\000\111\000\000\000\000\000\
\112\000\113\000\114\000\000\000\041\000\115\000\116\000\042\000\
\043\000\168\000\000\000\000\000\046\000\047\000\105\000\106\000\
\107\000\108\000\109\000\000\000\000\000\105\000\106\000\107\000\
\108\000\000\000\111\000\000\000\000\000\112\000\113\000\179\000\
\000\000\111\000\115\000\116\000\112\000\113\000\114\000\000\000\
\000\000\115\000\116\000"

let yycheck = "\001\000\
\032\001\005\001\006\001\007\001\008\001\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\012\001\017\001\016\000\001\000\
\020\001\021\001\022\001\019\001\022\000\025\001\026\001\009\001\
\005\001\006\001\007\001\008\001\015\001\016\001\032\000\009\001\
\034\000\009\001\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\032\001\012\001\046\000\026\001\007\001\008\001\
\032\001\051\000\019\001\053\000\035\000\055\000\009\001\010\001\
\058\000\012\001\013\001\009\001\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\032\001\025\001\012\001\
\012\001\015\001\016\001\030\001\031\001\009\001\019\001\019\001\
\082\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\255\255\005\001\006\001\007\001\008\001\009\001\255\255\
\005\001\006\001\007\001\008\001\255\255\103\000\017\001\007\001\
\008\001\020\001\021\001\022\001\091\000\092\000\025\001\026\001\
\012\001\012\001\255\255\117\000\031\001\026\001\120\000\019\001\
\019\001\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\113\000\255\255\115\000\015\001\016\001\005\001\
\006\001\007\001\008\001\009\001\015\001\016\001\125\000\255\255\
\127\000\147\000\129\000\017\001\131\000\255\255\020\001\021\001\
\022\001\015\001\016\001\025\001\026\001\015\001\016\001\142\000\
\255\255\031\001\255\255\255\255\255\255\167\000\149\000\255\255\
\255\255\255\255\255\255\154\000\155\000\156\000\255\255\255\255\
\255\255\255\255\255\255\162\000\255\255\255\255\255\255\166\000\
\255\255\255\255\169\000\255\255\171\000\255\255\255\255\001\001\
\002\001\003\001\004\001\178\000\006\001\180\000\255\255\009\001\
\255\255\011\001\255\255\013\001\014\001\255\255\255\255\255\255\
\018\001\255\255\255\255\021\001\255\255\255\255\024\001\255\255\
\255\255\027\001\028\001\029\001\255\255\255\255\255\255\033\001\
\034\001\035\001\001\001\002\001\003\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\027\001\028\001\029\001\255\255\
\255\255\255\255\033\001\034\001\035\001\001\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\255\255\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\255\255\027\001\
\028\001\029\001\255\255\255\255\255\255\033\001\034\001\035\001\
\001\001\002\001\003\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\018\001\255\255\255\255\021\001\255\255\255\255\024\001\
\255\255\255\255\255\255\255\255\029\001\255\255\255\255\255\255\
\033\001\034\001\001\001\002\001\003\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\022\001\
\255\255\024\001\255\255\255\255\255\255\255\255\029\001\255\255\
\255\255\255\255\033\001\034\001\001\001\002\001\003\001\004\001\
\255\255\006\001\255\255\255\255\009\001\255\255\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\018\001\255\255\255\255\
\255\255\255\255\255\255\024\001\255\255\255\255\255\255\255\255\
\029\001\255\255\255\255\255\255\033\001\034\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\255\255\255\255\030\001\
\031\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\255\255\
\005\001\006\001\030\001\031\001\009\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\005\001\
\006\001\030\001\031\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\005\001\006\001\
\030\001\031\001\009\001\010\001\255\255\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\005\001\006\001\030\001\
\031\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\255\255\255\255\030\001\031\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\017\001\255\255\255\255\020\001\
\021\001\022\001\255\255\017\001\025\001\026\001\020\001\021\001\
\022\001\030\001\255\255\025\001\026\001\255\255\009\001\010\001\
\030\001\012\001\013\001\255\255\015\001\016\001\017\001\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\025\001\255\255\
\255\255\255\255\255\255\030\001\031\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\255\255\255\255\
\255\255\255\255\030\001\031\001\009\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\255\255\255\255\255\255\
\255\255\030\001\031\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\009\001\010\001\255\255\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\009\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\009\001\010\001\
\255\255\012\001\013\001\255\255\015\001\016\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\009\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\009\001\010\001\255\255\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\019\001\255\255\255\255\255\255\
\023\001\255\255\255\255\255\255\255\255\255\255\255\255\030\001\
\031\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\009\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\009\001\010\001\
\255\255\012\001\013\001\255\255\015\001\016\001\255\255\018\001\
\019\001\255\255\255\255\255\255\023\001\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\009\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\009\001\010\001\255\255\012\001\013\001\255\255\
\015\001\016\001\255\255\018\001\019\001\255\255\255\255\255\255\
\023\001\005\001\006\001\007\001\008\001\009\001\255\255\030\001\
\031\001\255\255\255\255\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\005\001\006\001\
\007\001\008\001\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\255\255\017\001\025\001\026\001\005\001\006\001\007\001\
\008\001\009\001\025\001\026\001\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\005\001\006\001\007\001\008\001\255\255\017\001\
\255\255\019\001\020\001\021\001\022\001\255\255\017\001\025\001\
\026\001\005\001\006\001\007\001\008\001\009\001\025\001\026\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\005\001\006\001\
\007\001\008\001\009\001\017\001\255\255\255\255\020\001\021\001\
\022\001\016\001\017\001\025\001\026\001\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\005\001\006\001\007\001\008\001\
\009\001\010\001\255\255\005\001\006\001\007\001\008\001\009\001\
\017\001\255\255\255\255\020\001\021\001\022\001\016\001\017\001\
\025\001\026\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\255\255\255\255\255\255\015\001\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\017\001\
\255\255\019\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\017\001\018\001\255\255\
\020\001\021\001\022\001\016\001\017\001\025\001\026\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\255\255\255\255\255\255\
\255\255\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\255\255\016\001\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\005\001\006\001\007\001\008\001\009\001\010\001\
\255\255\005\001\006\001\007\001\008\001\009\001\017\001\255\255\
\255\255\020\001\021\001\022\001\016\001\017\001\025\001\026\001\
\020\001\021\001\022\001\255\255\255\255\025\001\026\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\015\001\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\255\255\255\255\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\005\001\006\001\007\001\008\001\009\001\017\001\255\255\255\255\
\020\001\021\001\022\001\016\001\017\001\025\001\026\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\005\001\006\001\007\001\008\001\
\009\001\010\001\255\255\005\001\006\001\007\001\008\001\009\001\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\017\001\
\025\001\026\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\005\001\006\001\007\001\008\001\009\001\255\255\255\255\
\005\001\006\001\007\001\008\001\009\001\017\001\255\255\255\255\
\020\001\021\001\022\001\255\255\017\001\025\001\026\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\009\001\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\017\001\025\001\026\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  LBRACES\000\
  RBRACES\000\
  UNDSC\000\
  LBKT\000\
  RBKT\000\
  COMMA\000\
  DOT\000\
  MOD\000\
  SEMICOLON\000\
  EQUALITY\000\
  LESS\000\
  MORE\000\
  EOL\000\
  DIM\000\
  ANGLE\000\
  PRIME\000\
  PRINT\000\
  QUIT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ASSIGN\000\
  FOR\000\
  WHILE\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VAR\000\
  INPUT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                            ( Ast.eval _1 )
# 662 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                              ( _2 )
# 669 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 34 "parser.mly"
                              ( Ast.eval (Ast.Intex _1) )
# 676 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 35 "parser.mly"
                            ( Ast.eval (Ast.Fltex _1) )
# 683 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 36 "parser.mly"
                            ( Ast.eval (Ast.Boolex _1) )
# 690 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "parser.mly"
                            ( Ast.eval (Ast.Varex _1) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                              ( Ast.eval (Ast.Dotprodex (_1, _3)) )
# 705 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                              ( Ast.eval (Ast.Addex (_1, _3)) )
# 713 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                              ( Ast.eval (Ast.Subex(_1, _3)) )
# 721 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                              ( Ast.eval (Ast.Mulex(_1, _3)) )
# 729 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "parser.mly"
                              ( Ast.eval (Ast.Divex(_1, _3)) )
# 737 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                              ( (Ast.Equex(_1,_3)) )
# 745 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                              ( (Ast.Lessex(_1, _3)) )
# 753 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                              ( (Ast.Morex(_1, _3)) )
# 761 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                              ( Ast.eval (Ast.Magex _2) )
# 768 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                              ( Ast.eval (Ast.Subex(Ast.Fltex 0., _2)) )
# 775 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                              ( Ast.eval (Ast.Anglex(_1,_3)) )
# 783 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                              ( Ast.eval (Ast.Dimex _2) )
# 790 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elements) in
    Obj.repr(
# 50 "parser.mly"
                              ( Ast.eval (Ast.Vectex _2) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                                        ( Ast.eval (Ast.Emptex (_2, _4)) )
# 805 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 52 "parser.mly"
                                        ( Ast.eval (Ast.Seqex _2))
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                                        ( Ast.eval (Ast.Cndex(_2, _4, _6)))
# 821 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                              ( Ast.eval (Ast.Letex (_1, _3)) )
# 829 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                                                          ( Ast.eval (Ast.AdMtex(_1, _3, _5, _8)) )
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                                                  ( Ast.eval (Ast.MtMinex (_1, _4, _6)))
# 848 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 57 "parser.mly"
                                                          ( Ast.eval (Ast.Forex(_3, _5, _7, _9)) )
# 858 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 58 "parser.mly"
                                                          ( Ast.eval (Ast.Forex(_3, _3, _5, Ast.Seqex [])) )
# 866 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                              ( Ast.eval (Ast.Transex _2) )
# 873 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                              ( Ast.eval (Ast.Invex _1) )
# 880 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                                    ( Ast.eval (Ast.Printex _3) )
# 887 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                                    ( Ast.eval (Ast.Inputex _1) )
# 894 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
                                    ( Ast.Quitex )
# 900 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                            ( [Ast.eval _1] )
# 907 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 915 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                            ( [Ast.eval _1] )
# 922 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 930 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 74 "parser.mly"
                             ( _2 )
# 937 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 75 "parser.mly"
                              ( (Ast.Intex _1) )
# 944 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 76 "parser.mly"
                            ( (Ast.Fltex _1) )
# 951 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 77 "parser.mly"
                            ( (Ast.Boolex _1) )
# 958 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 78 "parser.mly"
                            ( (Ast.Varex _1) )
# 965 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 79 "parser.mly"
                            ( (Ast.Dotprodex (_1, _3)) )
# 973 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 80 "parser.mly"
                            ( (Ast.Addex (_1, _3)) )
# 981 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 81 "parser.mly"
                            ( (Ast.Subex(_1, _3)) )
# 989 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 82 "parser.mly"
                            ( (Ast.Mulex(_1, _3)) )
# 997 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 83 "parser.mly"
                            ( (Ast.Divex(_1, _3)) )
# 1005 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 84 "parser.mly"
                            ( (Ast.Equex(_1,_3)) )
# 1013 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 85 "parser.mly"
                            ( (Ast.Lessex(_1, _3)) )
# 1021 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 86 "parser.mly"
                            ( (Ast.Morex(_1, _3)) )
# 1029 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 87 "parser.mly"
                             ( (Ast.Magex _2) )
# 1036 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 88 "parser.mly"
                             ( (Ast.Subex(Ast.Fltex 0., _2)) )
# 1043 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 89 "parser.mly"
                             ( (Ast.Anglex(_1,_3)) )
# 1051 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 90 "parser.mly"
                             ( (Ast.Dimex _2) )
# 1058 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmdelements) in
    Obj.repr(
# 91 "parser.mly"
                                 ( (Ast.Vectex _2) )
# 1065 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 92 "parser.mly"
                                       ( (Ast.Emptex (_2, _4)) )
# 1073 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmds) in
    Obj.repr(
# 93 "parser.mly"
                                       ( (Ast.Seqex _2) )
# 1080 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 94 "parser.mly"
                                       ( (Ast.Cndex(_2, _4, _6)))
# 1089 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 95 "parser.mly"
                             ( (Ast.Letex (_1, _3)) )
# 1097 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'cmd) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 96 "parser.mly"
                                                     ( (Ast.AdMtex(_1, _3, _5, _8)))
# 1107 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    Obj.repr(
# 97 "parser.mly"
                                               ( (Ast.MtMinex (_1, _4, _6)))
# 1116 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 98 "parser.mly"
                                                          ( (Ast.Forex(_3, _5, _7, _9)) )
# 1126 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 99 "parser.mly"
                                                          ( (Ast.Forex(_3, _3, _5, Ast.Seqex [])) )
# 1134 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 100 "parser.mly"
                             ( (Ast.Transex _2) )
# 1141 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 101 "parser.mly"
                             ( (Ast.Invex _1) )
# 1148 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 104 "parser.mly"
                              ( [_1] )
# 1155 "parser.ml"
               : 'cmdelements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmdelements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 105 "parser.mly"
                              ( _1 @ [_3] )
# 1163 "parser.ml"
               : 'cmdelements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 107 "parser.mly"
                          ( [_1] )
# 1170 "parser.ml"
               : 'cmds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmds) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 108 "parser.mly"
                          ( _1 @ [_3] )
# 1178 "parser.ml"
               : 'cmds))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
