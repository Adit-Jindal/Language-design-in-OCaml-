type token =
  | INT of (
# 1 "parser.mly"
        int
# 6 "parser.ml"
)
  | FLOAT of (
# 2 "parser.mly"
        float
# 11 "parser.ml"
)
  | BOOL of (
# 3 "parser.mly"
        bool
# 16 "parser.ml"
)
  | VAR of (
# 4 "parser.mly"
        string
# 21 "parser.ml"
)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LPAREN
  | RPAREN
  | LBRACES
  | RBRACES
  | UNDSC
  | LBKT
  | RBKT
  | COMMA
  | DOT
  | MOD
  | SEMICOLON
  | EQUALITY
  | LESS
  | MORE
  | EOL
  | DIM
  | ANGLE
  | PRIME
  | PRINT
  | IF
  | THEN
  | ELSE
  | ASSIGN
  | FOR
  | WHILE
  | INPUT of (
# 11 "parser.mly"
        string
# 55 "parser.ml"
)

open Parsing
let _ = parse_error;;
let yytransl_const = [|
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* TIMES *);
  264 (* DIV *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* LBRACES *);
  268 (* RBRACES *);
  269 (* UNDSC *);
  270 (* LBKT *);
  271 (* RBKT *);
  272 (* COMMA *);
  273 (* DOT *);
  274 (* MOD *);
  275 (* SEMICOLON *);
  276 (* EQUALITY *);
  277 (* LESS *);
  278 (* MORE *);
  279 (* EOL *);
  280 (* DIM *);
  281 (* ANGLE *);
  282 (* PRIME *);
  283 (* PRINT *);
  284 (* IF *);
  285 (* THEN *);
  286 (* ELSE *);
  287 (* ASSIGN *);
  288 (* FOR *);
  289 (* WHILE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* VAR *);
  290 (* INPUT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\003\000\
\003\000\004\000\004\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
\006\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\002\000\003\000\005\000\003\000\006\000\003\000\008\000\
\008\000\009\000\005\000\003\000\002\000\004\000\001\000\001\000\
\003\000\001\000\003\000\003\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\003\000\002\000\003\000\005\000\003\000\006\000\
\003\000\008\000\008\000\009\000\005\000\003\000\002\000\001\000\
\003\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\004\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\031\000\068\000\000\000\000\000\016\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\029\000\000\000\002\000\
\021\000\000\000\028\000\000\000\019\000\000\000\015\000\000\000\
\000\000\000\000\037\000\038\000\039\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\011\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
\000\000\000\000\000\000\050\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\000\000\000\000\020\000\000\000\000\000\
\000\000\036\000\055\000\000\000\062\000\000\000\053\000\000\000\
\049\000\000\000\000\000\000\000\000\000\000\000\044\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\000\000"

let yydgoto = "\002\000\
\019\000\083\000\028\000\025\000\143\000\098\000\095\000"

let yysindex = "\014\000\
\002\000\000\000\000\000\000\000\000\000\244\254\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\014\255\002\000\016\255\
\018\255\000\000\000\000\228\001\002\000\000\000\250\001\198\003\
\012\255\016\002\038\002\013\255\060\002\016\005\002\000\085\255\
\002\000\102\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\190\255\002\000\000\000\002\000\000\000\016\005\000\000\
\000\000\002\000\000\000\002\000\000\000\002\000\000\000\082\002\
\002\000\089\002\000\000\000\000\000\000\002\255\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\102\000\033\255\048\255\
\111\002\038\255\038\255\000\000\000\000\118\002\090\255\001\002\
\002\000\001\002\001\002\090\255\198\003\140\002\198\003\000\000\
\252\254\102\000\102\000\000\000\162\002\220\003\031\255\184\002\
\206\002\032\255\228\002\023\005\249\000\002\000\102\000\102\000\
\102\000\102\000\102\000\102\000\102\000\102\000\102\000\036\000\
\102\000\102\000\000\000\002\000\235\002\000\000\002\000\001\003\
\023\005\000\000\000\000\102\000\000\000\102\000\000\000\102\000\
\000\000\102\000\023\003\045\003\069\255\069\255\000\000\000\000\
\052\003\023\005\156\255\045\002\102\000\045\002\045\002\156\255\
\074\003\002\000\016\005\102\000\220\003\096\003\220\003\130\255\
\102\000\102\000\102\000\118\003\029\255\227\003\140\003\000\000\
\102\000\147\003\023\005\169\003\102\000\002\000\224\255\102\000\
\023\005\102\000\042\255\249\003\016\005\000\000\023\005\191\003\
\102\000\069\000\102\000\023\005\000\000\023\005"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\131\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100\255\
\000\000\000\000\084\255\000\000\000\000\011\004\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\033\004\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\157\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\049\255\179\000\000\000\000\000\000\000\011\001\099\001\
\000\000\121\001\143\001\033\001\101\255\000\000\088\255\000\000\
\000\000\000\000\000\000\000\000\000\000\121\255\000\000\000\000\
\138\255\000\000\000\000\055\004\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\201\000\223\000\000\000\000\000\
\000\000\099\004\055\001\165\001\000\000\187\001\209\001\077\001\
\000\000\000\000\121\004\000\000\122\255\000\000\142\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\143\004\000\000\000\000\000\000\000\000\000\000\
\165\004\000\000\000\000\000\000\187\004\000\000\209\004\000\000\
\000\000\000\000\000\000\231\004\000\000\253\004"

let yygindex = "\000\000\
\000\000\255\255\000\000\000\000\018\000\000\000\000\000"

let yytablesize = 1585
let yytable = "\020\000\
\035\000\036\000\037\000\038\000\039\000\022\000\023\000\024\000\
\026\000\027\000\029\000\030\000\040\000\032\000\001\000\041\000\
\042\000\043\000\021\000\047\000\045\000\046\000\031\000\049\000\
\033\000\119\000\034\000\053\000\054\000\056\000\050\000\058\000\
\091\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\082\000\102\000\123\000\084\000\037\000\038\000\127\000\128\000\
\085\000\124\000\086\000\073\000\087\000\008\000\008\000\089\000\
\103\000\008\000\008\000\166\000\008\000\008\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\177\000\008\000\008\000\106\000\107\000\008\000\008\000\117\000\
\092\000\093\000\094\000\096\000\097\000\099\000\100\000\101\000\
\000\000\035\000\036\000\037\000\038\000\039\000\035\000\036\000\
\037\000\038\000\032\000\032\000\131\000\040\000\033\000\033\000\
\041\000\042\000\043\000\120\000\121\000\045\000\046\000\034\000\
\035\000\057\000\145\000\046\000\000\000\147\000\034\000\035\000\
\132\000\133\000\134\000\135\000\136\000\137\000\138\000\139\000\
\140\000\142\000\000\000\144\000\066\000\067\000\104\000\105\000\
\106\000\107\000\108\000\066\000\067\000\149\000\000\000\150\000\
\158\000\151\000\110\000\152\000\000\000\111\000\112\000\113\000\
\064\000\064\000\114\000\115\000\065\000\065\000\156\000\161\000\
\104\000\105\000\106\000\107\000\173\000\159\000\000\000\000\000\
\000\000\000\000\162\000\163\000\164\000\000\000\000\000\000\000\
\000\000\000\000\169\000\000\000\000\000\115\000\172\000\000\000\
\000\000\175\000\000\000\176\000\000\000\000\000\003\000\004\000\
\005\000\006\000\180\000\007\000\182\000\000\000\008\000\000\000\
\009\000\000\000\010\000\011\000\000\000\000\000\000\000\012\000\
\000\000\000\000\081\000\000\000\000\000\013\000\000\000\000\000\
\014\000\015\000\000\000\000\000\000\000\016\000\017\000\018\000\
\003\000\004\000\005\000\006\000\000\000\007\000\000\000\000\000\
\008\000\000\000\009\000\000\000\010\000\011\000\000\000\000\000\
\000\000\012\000\000\000\000\000\000\000\174\000\000\000\013\000\
\000\000\000\000\014\000\015\000\000\000\000\000\000\000\016\000\
\017\000\018\000\003\000\004\000\005\000\006\000\000\000\007\000\
\000\000\000\000\008\000\000\000\009\000\000\000\010\000\011\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\013\000\000\000\000\000\014\000\015\000\000\000\000\000\
\000\000\016\000\017\000\018\000\059\000\060\000\061\000\062\000\
\000\000\063\000\000\000\000\000\064\000\000\000\065\000\000\000\
\066\000\067\000\000\000\000\000\000\000\068\000\000\000\000\000\
\141\000\000\000\000\000\069\000\000\000\000\000\000\000\070\000\
\000\000\000\000\000\000\071\000\072\000\059\000\060\000\061\000\
\062\000\000\000\063\000\000\000\000\000\064\000\000\000\065\000\
\000\000\066\000\067\000\000\000\000\000\000\000\068\000\000\000\
\000\000\000\000\181\000\000\000\069\000\000\000\000\000\000\000\
\070\000\000\000\000\000\000\000\071\000\072\000\059\000\060\000\
\061\000\062\000\000\000\063\000\000\000\000\000\064\000\000\000\
\065\000\000\000\066\000\067\000\000\000\000\000\000\000\068\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\000\000\070\000\000\000\000\000\000\000\071\000\072\000\006\000\
\006\000\006\000\006\000\006\000\006\000\000\000\006\000\006\000\
\000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\000\000\006\000\006\000\000\000\000\000\006\000\
\006\000\040\000\040\000\040\000\040\000\040\000\040\000\000\000\
\040\000\040\000\000\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\040\000\040\000\009\000\
\009\000\040\000\040\000\009\000\009\000\000\000\009\000\009\000\
\000\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\000\000\009\000\009\000\042\000\042\000\009\000\
\009\000\042\000\042\000\000\000\042\000\042\000\000\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\042\000\042\000\043\000\043\000\042\000\042\000\043\000\
\043\000\000\000\043\000\043\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\043\000\
\043\000\000\000\000\000\043\000\043\000\104\000\105\000\106\000\
\107\000\108\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\000\000\000\000\000\111\000\112\000\113\000\000\000\
\000\000\114\000\115\000\007\000\007\000\130\000\007\000\007\000\
\000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\000\000\000\000\000\000\007\000\
\007\000\017\000\017\000\000\000\017\000\017\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
\000\000\017\000\000\000\000\000\000\000\017\000\017\000\041\000\
\041\000\000\000\041\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\041\000\
\000\000\000\000\000\000\041\000\041\000\051\000\051\000\000\000\
\051\000\051\000\000\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\000\000\051\000\000\000\000\000\
\000\000\051\000\051\000\012\000\012\000\000\000\012\000\012\000\
\000\000\012\000\012\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\000\000\000\000\000\000\000\000\000\000\012\000\
\012\000\013\000\013\000\000\000\013\000\013\000\000\000\013\000\
\013\000\000\000\013\000\013\000\013\000\013\000\013\000\013\000\
\000\000\000\000\000\000\000\000\000\000\013\000\013\000\014\000\
\014\000\000\000\014\000\014\000\000\000\014\000\014\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\000\000\
\000\000\000\000\000\000\014\000\014\000\046\000\046\000\000\000\
\046\000\046\000\000\000\046\000\046\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\000\000\
\000\000\046\000\046\000\047\000\047\000\000\000\047\000\047\000\
\000\000\047\000\047\000\000\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\000\000\000\000\000\000\000\000\047\000\
\047\000\048\000\048\000\000\000\048\000\048\000\000\000\048\000\
\048\000\000\000\048\000\048\000\048\000\048\000\048\000\048\000\
\035\000\036\000\037\000\038\000\039\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\040\000\000\000\000\000\041\000\
\042\000\043\000\044\000\000\000\045\000\046\000\035\000\036\000\
\037\000\038\000\039\000\048\000\000\000\035\000\036\000\037\000\
\038\000\000\000\040\000\000\000\000\000\041\000\042\000\043\000\
\000\000\040\000\045\000\046\000\035\000\036\000\037\000\038\000\
\039\000\045\000\046\000\000\000\051\000\000\000\000\000\000\000\
\040\000\000\000\000\000\041\000\042\000\043\000\000\000\000\000\
\045\000\046\000\035\000\036\000\037\000\038\000\039\000\000\000\
\000\000\104\000\105\000\106\000\107\000\000\000\040\000\000\000\
\052\000\041\000\042\000\043\000\000\000\110\000\045\000\046\000\
\035\000\036\000\037\000\038\000\039\000\114\000\115\000\000\000\
\000\000\000\000\000\000\000\000\040\000\055\000\000\000\041\000\
\042\000\043\000\000\000\000\000\045\000\046\000\035\000\036\000\
\037\000\038\000\039\000\088\000\000\000\035\000\036\000\037\000\
\038\000\039\000\040\000\000\000\000\000\041\000\042\000\043\000\
\090\000\040\000\045\000\046\000\041\000\042\000\043\000\000\000\
\000\000\045\000\046\000\104\000\105\000\106\000\107\000\108\000\
\109\000\000\000\035\000\036\000\037\000\038\000\039\000\110\000\
\000\000\000\000\111\000\112\000\113\000\116\000\040\000\114\000\
\115\000\041\000\042\000\043\000\000\000\000\000\045\000\046\000\
\035\000\036\000\037\000\038\000\039\000\000\000\000\000\000\000\
\000\000\000\000\118\000\000\000\040\000\000\000\000\000\041\000\
\042\000\043\000\000\000\000\000\045\000\046\000\104\000\105\000\
\106\000\107\000\108\000\122\000\000\000\000\000\000\000\000\000\
\000\000\000\000\110\000\000\000\000\000\111\000\112\000\113\000\
\000\000\000\000\114\000\115\000\104\000\105\000\106\000\107\000\
\108\000\000\000\000\000\000\000\125\000\000\000\000\000\000\000\
\110\000\000\000\000\000\111\000\112\000\113\000\000\000\000\000\
\114\000\115\000\104\000\105\000\106\000\107\000\108\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\110\000\000\000\
\126\000\111\000\112\000\113\000\000\000\000\000\114\000\115\000\
\104\000\105\000\106\000\107\000\108\000\000\000\000\000\035\000\
\036\000\037\000\038\000\039\000\110\000\129\000\000\000\111\000\
\112\000\113\000\146\000\040\000\114\000\115\000\041\000\042\000\
\043\000\000\000\000\000\045\000\046\000\104\000\105\000\106\000\
\107\000\108\000\000\000\000\000\000\000\000\000\000\000\000\000\
\148\000\110\000\000\000\000\000\111\000\112\000\113\000\000\000\
\000\000\114\000\115\000\035\000\036\000\037\000\038\000\039\000\
\000\000\000\000\000\000\000\000\000\000\000\000\153\000\040\000\
\000\000\000\000\041\000\042\000\043\000\000\000\000\000\045\000\
\046\000\104\000\105\000\106\000\107\000\108\000\154\000\000\000\
\104\000\105\000\106\000\107\000\108\000\110\000\000\000\000\000\
\111\000\112\000\113\000\155\000\110\000\114\000\115\000\111\000\
\112\000\113\000\000\000\000\000\114\000\115\000\035\000\036\000\
\037\000\038\000\039\000\157\000\000\000\000\000\000\000\000\000\
\000\000\000\000\040\000\000\000\000\000\041\000\042\000\043\000\
\000\000\000\000\045\000\046\000\104\000\105\000\106\000\107\000\
\108\000\000\000\000\000\000\000\000\000\000\000\160\000\000\000\
\110\000\000\000\000\000\111\000\112\000\113\000\000\000\000\000\
\114\000\115\000\104\000\105\000\106\000\107\000\108\000\000\000\
\000\000\000\000\000\000\000\000\000\000\165\000\110\000\000\000\
\000\000\111\000\112\000\113\000\000\000\000\000\114\000\115\000\
\104\000\105\000\106\000\107\000\108\000\168\000\000\000\104\000\
\105\000\106\000\107\000\108\000\110\000\000\000\000\000\111\000\
\112\000\113\000\170\000\110\000\114\000\115\000\111\000\112\000\
\113\000\000\000\000\000\114\000\115\000\104\000\105\000\106\000\
\107\000\108\000\171\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\000\000\000\000\000\111\000\112\000\113\000\000\000\
\000\000\114\000\115\000\104\000\105\000\106\000\107\000\108\000\
\179\000\000\000\035\000\036\000\037\000\038\000\039\000\110\000\
\000\000\000\000\111\000\112\000\113\000\000\000\040\000\114\000\
\115\000\041\000\042\000\043\000\000\000\000\000\045\000\046\000\
\104\000\105\000\106\000\107\000\108\000\000\000\000\000\035\000\
\036\000\037\000\038\000\039\000\110\000\000\000\000\000\111\000\
\112\000\113\000\000\000\040\000\114\000\115\000\041\000\042\000\
\167\000\000\000\000\000\045\000\046\000\104\000\105\000\106\000\
\107\000\108\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\110\000\000\000\000\000\111\000\112\000\178\000\000\000\
\000\000\114\000\115\000\018\000\018\000\000\000\018\000\018\000\
\000\000\018\000\018\000\000\000\018\000\018\000\000\000\000\000\
\000\000\018\000\000\000\000\000\000\000\000\000\000\000\018\000\
\018\000\023\000\023\000\000\000\023\000\023\000\000\000\023\000\
\023\000\000\000\023\000\023\000\000\000\000\000\000\000\023\000\
\000\000\000\000\000\000\000\000\000\000\023\000\023\000\052\000\
\052\000\000\000\052\000\052\000\000\000\052\000\052\000\000\000\
\052\000\052\000\000\000\000\000\000\000\052\000\000\000\000\000\
\000\000\000\000\000\000\052\000\052\000\057\000\057\000\000\000\
\057\000\057\000\000\000\057\000\057\000\000\000\057\000\057\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\000\000\
\000\000\057\000\057\000\027\000\027\000\000\000\027\000\027\000\
\000\000\027\000\027\000\000\000\027\000\027\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\027\000\
\027\000\022\000\022\000\000\000\022\000\022\000\000\000\022\000\
\022\000\000\000\022\000\022\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\022\000\022\000\061\000\
\061\000\000\000\061\000\061\000\000\000\061\000\061\000\000\000\
\061\000\061\000\000\000\000\000\000\000\061\000\000\000\000\000\
\000\000\000\000\000\000\061\000\061\000\056\000\056\000\000\000\
\056\000\056\000\000\000\056\000\056\000\000\000\056\000\056\000\
\000\000\000\000\000\000\056\000\000\000\000\000\000\000\000\000\
\000\000\056\000\056\000\024\000\024\000\000\000\024\000\024\000\
\000\000\024\000\024\000\000\000\024\000\024\000\000\000\000\000\
\000\000\024\000\000\000\000\000\000\000\000\000\000\000\024\000\
\024\000\026\000\026\000\000\000\026\000\026\000\000\000\026\000\
\026\000\000\000\026\000\026\000\000\000\000\000\000\000\026\000\
\000\000\000\000\000\000\000\000\000\000\026\000\026\000\058\000\
\058\000\000\000\058\000\058\000\000\000\058\000\058\000\000\000\
\058\000\058\000\000\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\000\000\058\000\058\000\060\000\060\000\000\000\
\060\000\060\000\000\000\060\000\060\000\000\000\060\000\060\000\
\000\000\000\000\000\000\060\000\035\000\036\000\037\000\038\000\
\000\000\060\000\060\000\104\000\105\000\106\000\107\000\000\000\
\040\000\000\000\000\000\041\000\042\000\043\000\000\000\110\000\
\045\000\046\000\111\000\112\000\113\000\000\000\000\000\114\000\
\115\000"

let yycheck = "\001\000\
\005\001\006\001\007\001\008\001\009\001\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\017\001\015\000\001\000\020\001\
\021\001\022\001\031\001\021\000\025\001\026\001\009\001\012\001\
\009\001\030\001\009\001\015\001\016\001\031\000\019\001\033\000\
\031\001\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\009\001\012\001\045\000\007\001\008\001\015\001\016\001\
\050\000\019\001\052\000\034\000\054\000\005\001\006\001\057\000\
\009\001\009\001\010\001\031\001\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\031\001\025\001\026\001\007\001\008\001\029\001\030\001\081\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\255\255\005\001\006\001\007\001\008\001\009\001\005\001\006\001\
\007\001\008\001\015\001\016\001\102\000\017\001\015\001\016\001\
\020\001\021\001\022\001\090\000\091\000\025\001\026\001\012\001\
\012\001\029\001\116\000\026\001\255\255\119\000\019\001\019\001\
\103\000\104\000\105\000\106\000\107\000\108\000\109\000\110\000\
\111\000\112\000\255\255\114\000\012\001\012\001\005\001\006\001\
\007\001\008\001\009\001\019\001\019\001\124\000\255\255\126\000\
\146\000\128\000\017\001\130\000\255\255\020\001\021\001\022\001\
\015\001\016\001\025\001\026\001\015\001\016\001\141\000\030\001\
\005\001\006\001\007\001\008\001\166\000\148\000\255\255\255\255\
\255\255\255\255\153\000\154\000\155\000\255\255\255\255\255\255\
\255\255\255\255\161\000\255\255\255\255\026\001\165\000\255\255\
\255\255\168\000\255\255\170\000\255\255\255\255\001\001\002\001\
\003\001\004\001\177\000\006\001\179\000\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\018\001\
\255\255\255\255\021\001\255\255\255\255\024\001\255\255\255\255\
\027\001\028\001\255\255\255\255\255\255\032\001\033\001\034\001\
\001\001\002\001\003\001\004\001\255\255\006\001\255\255\255\255\
\009\001\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\022\001\255\255\024\001\
\255\255\255\255\027\001\028\001\255\255\255\255\255\255\032\001\
\033\001\034\001\001\001\002\001\003\001\004\001\255\255\006\001\
\255\255\255\255\009\001\255\255\011\001\255\255\013\001\014\001\
\255\255\255\255\255\255\018\001\255\255\255\255\255\255\255\255\
\255\255\024\001\255\255\255\255\027\001\028\001\255\255\255\255\
\255\255\032\001\033\001\034\001\001\001\002\001\003\001\004\001\
\255\255\006\001\255\255\255\255\009\001\255\255\011\001\255\255\
\013\001\014\001\255\255\255\255\255\255\018\001\255\255\255\255\
\021\001\255\255\255\255\024\001\255\255\255\255\255\255\028\001\
\255\255\255\255\255\255\032\001\033\001\001\001\002\001\003\001\
\004\001\255\255\006\001\255\255\255\255\009\001\255\255\011\001\
\255\255\013\001\014\001\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\022\001\255\255\024\001\255\255\255\255\255\255\
\028\001\255\255\255\255\255\255\032\001\033\001\001\001\002\001\
\003\001\004\001\255\255\006\001\255\255\255\255\009\001\255\255\
\011\001\255\255\013\001\014\001\255\255\255\255\255\255\018\001\
\255\255\255\255\255\255\255\255\255\255\024\001\255\255\255\255\
\255\255\028\001\255\255\255\255\255\255\032\001\033\001\005\001\
\006\001\007\001\008\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\255\255\029\001\
\030\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\026\001\005\001\
\006\001\029\001\030\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\005\001\006\001\029\001\
\030\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\005\001\006\001\029\001\030\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\255\255\029\001\030\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\009\001\010\001\029\001\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\030\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\030\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\005\001\006\001\007\001\008\001\009\001\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\017\001\255\255\255\255\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\005\001\006\001\007\001\
\008\001\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\017\001\025\001\026\001\005\001\006\001\007\001\008\001\
\009\001\025\001\026\001\255\255\013\001\255\255\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\005\001\006\001\007\001\008\001\255\255\017\001\255\255\
\019\001\020\001\021\001\022\001\255\255\017\001\025\001\026\001\
\005\001\006\001\007\001\008\001\009\001\025\001\026\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\005\001\006\001\007\001\
\008\001\009\001\017\001\255\255\255\255\020\001\021\001\022\001\
\016\001\017\001\025\001\026\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\009\001\
\010\001\255\255\005\001\006\001\007\001\008\001\009\001\017\001\
\255\255\255\255\020\001\021\001\022\001\016\001\017\001\025\001\
\026\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\255\255\
\255\255\255\255\015\001\255\255\017\001\255\255\255\255\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\017\001\255\255\
\019\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\017\001\018\001\255\255\020\001\
\021\001\022\001\016\001\017\001\025\001\026\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\016\001\017\001\
\255\255\255\255\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\005\001\006\001\007\001\008\001\009\001\010\001\255\255\
\005\001\006\001\007\001\008\001\009\001\017\001\255\255\255\255\
\020\001\021\001\022\001\016\001\017\001\025\001\026\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\009\001\010\001\255\255\255\255\255\255\255\255\
\255\255\255\255\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\255\255\025\001\026\001\005\001\006\001\007\001\008\001\
\009\001\255\255\255\255\255\255\255\255\255\255\015\001\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\255\255\
\025\001\026\001\005\001\006\001\007\001\008\001\009\001\255\255\
\255\255\255\255\255\255\255\255\255\255\016\001\017\001\255\255\
\255\255\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\005\001\006\001\007\001\008\001\009\001\010\001\255\255\005\001\
\006\001\007\001\008\001\009\001\017\001\255\255\255\255\020\001\
\021\001\022\001\016\001\017\001\025\001\026\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\005\001\006\001\007\001\
\008\001\009\001\010\001\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\009\001\
\010\001\255\255\005\001\006\001\007\001\008\001\009\001\017\001\
\255\255\255\255\020\001\021\001\022\001\255\255\017\001\025\001\
\026\001\020\001\021\001\022\001\255\255\255\255\025\001\026\001\
\005\001\006\001\007\001\008\001\009\001\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\017\001\255\255\255\255\020\001\
\021\001\022\001\255\255\017\001\025\001\026\001\020\001\021\001\
\022\001\255\255\255\255\025\001\026\001\005\001\006\001\007\001\
\008\001\009\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\255\255\023\001\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\009\001\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\255\255\018\001\019\001\255\255\255\255\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\009\001\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\255\255\018\001\019\001\255\255\255\255\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\009\001\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\255\255\
\018\001\019\001\255\255\255\255\255\255\023\001\255\255\255\255\
\255\255\255\255\255\255\029\001\030\001\009\001\010\001\255\255\
\012\001\013\001\255\255\015\001\016\001\255\255\018\001\019\001\
\255\255\255\255\255\255\023\001\005\001\006\001\007\001\008\001\
\255\255\029\001\030\001\005\001\006\001\007\001\008\001\255\255\
\017\001\255\255\255\255\020\001\021\001\022\001\255\255\017\001\
\025\001\026\001\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  LBRACES\000\
  RBRACES\000\
  UNDSC\000\
  LBKT\000\
  RBKT\000\
  COMMA\000\
  DOT\000\
  MOD\000\
  SEMICOLON\000\
  EQUALITY\000\
  LESS\000\
  MORE\000\
  EOL\000\
  DIM\000\
  ANGLE\000\
  PRIME\000\
  PRINT\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ASSIGN\000\
  FOR\000\
  WHILE\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VAR\000\
  INPUT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                            ( Ast.eval _1 )
# 653 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                              ( _2 )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 34 "parser.mly"
                              ( Ast.eval (Ast.Intex _1) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 35 "parser.mly"
                            ( Ast.eval (Ast.Fltex _1) )
# 674 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 36 "parser.mly"
                            ( Ast.eval (Ast.Boolex _1) )
# 681 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 37 "parser.mly"
                            ( Ast.eval (Ast.Varex _1) )
# 688 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                              ( Ast.eval (Ast.Dotprodex (_1, _3)) )
# 696 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                              ( Ast.eval (Ast.Addex (_1, _3)) )
# 704 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                              ( Ast.eval (Ast.Subex(_1, _3)) )
# 712 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                              ( Ast.eval (Ast.Mulex(_1, _3)) )
# 720 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "parser.mly"
                              ( Ast.eval (Ast.Divex(_1, _3)) )
# 728 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                              ( (Ast.Equex(_1,_3)) )
# 736 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                              ( (Ast.Lessex(_1, _3)) )
# 744 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                              ( (Ast.Morex(_1, _3)) )
# 752 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                              ( Ast.eval (Ast.Magex _2) )
# 759 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                              ( Ast.eval (Ast.Subex(Ast.Fltex 0., _2)) )
# 766 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                              ( Ast.eval (Ast.Anglex(_1,_3)) )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                              ( Ast.eval (Ast.Dimex _2) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elements) in
    Obj.repr(
# 50 "parser.mly"
                              ( Ast.eval (Ast.Vectex _2) )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                                        ( Ast.eval (Ast.Emptex (_2, _4)) )
# 796 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 52 "parser.mly"
                                        ( Ast.eval (Ast.Seqex _2))
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 53 "parser.mly"
                                        ( Ast.eval (Ast.Cndex(_2, _4, _6)))
# 812 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                              ( Ast.eval (Ast.Letex (_1, _3)) )
# 820 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                                                          ( Ast.eval (Ast.AdMtex(_1, _3, _5, _8)) )
# 830 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                                                  ( Ast.eval (Ast.MtMinex (_1, _4, _6)))
# 839 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 57 "parser.mly"
                                                          ( Ast.eval (Ast.Forex(_3, _5, _7, _9)) )
# 849 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 58 "parser.mly"
                                                          ( Ast.eval (Ast.Forex(_3, _3, _5, Ast.Seqex [])) )
# 857 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                              ( Ast.eval (Ast.Transex _2) )
# 864 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                              ( Ast.eval (Ast.Invex _1) )
# 871 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                                    ( Ast.eval (Ast.Printex _3) )
# 878 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                                    ( Ast.eval (Ast.Inputex _1) )
# 885 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                            ( [Ast.eval _1] )
# 892 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 66 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 900 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 69 "parser.mly"
                            ( [Ast.eval _1] )
# 907 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 915 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 73 "parser.mly"
                             ( _2 )
# 922 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "parser.mly"
                              ( (Ast.Intex _1) )
# 929 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 75 "parser.mly"
                            ( (Ast.Fltex _1) )
# 936 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 76 "parser.mly"
                            ( (Ast.Boolex _1) )
# 943 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                            ( (Ast.Varex _1) )
# 950 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 78 "parser.mly"
                            ( (Ast.Dotprodex (_1, _3)) )
# 958 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 79 "parser.mly"
                            ( (Ast.Addex (_1, _3)) )
# 966 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 80 "parser.mly"
                            ( (Ast.Subex(_1, _3)) )
# 974 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 81 "parser.mly"
                            ( (Ast.Mulex(_1, _3)) )
# 982 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 82 "parser.mly"
                            ( (Ast.Divex(_1, _3)) )
# 990 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 83 "parser.mly"
                            ( (Ast.Equex(_1,_3)) )
# 998 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 84 "parser.mly"
                            ( (Ast.Lessex(_1, _3)) )
# 1006 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 85 "parser.mly"
                            ( (Ast.Morex(_1, _3)) )
# 1014 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 86 "parser.mly"
                             ( (Ast.Magex _2) )
# 1021 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 87 "parser.mly"
                             ( (Ast.Subex(Ast.Fltex 0., _2)) )
# 1028 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 88 "parser.mly"
                             ( (Ast.Anglex(_1,_3)) )
# 1036 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 89 "parser.mly"
                             ( (Ast.Dimex _2) )
# 1043 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmdelements) in
    Obj.repr(
# 90 "parser.mly"
                                 ( (Ast.Vectex _2) )
# 1050 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 91 "parser.mly"
                                       ( (Ast.Emptex (_2, _4)) )
# 1058 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmds) in
    Obj.repr(
# 92 "parser.mly"
                                       ( (Ast.Seqex _2) )
# 1065 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 93 "parser.mly"
                                       ( (Ast.Cndex(_2, _4, _6)))
# 1074 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 94 "parser.mly"
                             ( (Ast.Letex (_1, _3)) )
# 1082 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : 'cmd) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 95 "parser.mly"
                                                     ( (Ast.AdMtex(_1, _3, _5, _8)))
# 1092 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    Obj.repr(
# 96 "parser.mly"
                                               ( (Ast.MtMinex (_1, _4, _6)))
# 1101 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 97 "parser.mly"
                                                          ( (Ast.Forex(_3, _5, _7, _9)) )
# 1111 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 98 "parser.mly"
                                                          ( (Ast.Forex(_3, _3, _5, Ast.Seqex [])) )
# 1119 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 99 "parser.mly"
                             ( (Ast.Transex _2) )
# 1126 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 100 "parser.mly"
                             ( (Ast.Invex _1) )
# 1133 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 103 "parser.mly"
                              ( [_1] )
# 1140 "parser.ml"
               : 'cmdelements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmdelements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 104 "parser.mly"
                              ( _1 @ [_3] )
# 1148 "parser.ml"
               : 'cmdelements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 106 "parser.mly"
                          ( [_1] )
# 1155 "parser.ml"
               : 'cmds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmds) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 107 "parser.mly"
                          ( _1 @ [_3] )
# 1163 "parser.ml"
               : 'cmds))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
