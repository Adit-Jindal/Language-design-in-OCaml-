type token =
  | INT of (
# 1 "parser.mly"
        int
# 6 "parser.ml"
)
  | FLOAT of (
# 2 "parser.mly"
        float
# 11 "parser.ml"
)
  | BOOL of (
# 3 "parser.mly"
        bool
# 16 "parser.ml"
)
  | VAR of (
# 4 "parser.mly"
        string
# 21 "parser.ml"
)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LPAREN
  | RPAREN
  | LBRACES
  | RBRACES
  | LBKT
  | RBKT
  | COMMA
  | DOT
  | MOD
  | SEMICOLON
  | EOL
  | DIM
  | ANGLE
  | IF
  | THEN
  | ELSE
  | ASSIGN

open Parsing
let _ = parse_error;;
let yytransl_const = [|
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* TIMES *);
  264 (* DIV *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* LBRACES *);
  268 (* RBRACES *);
  269 (* LBKT *);
  270 (* RBKT *);
  271 (* COMMA *);
  272 (* DOT *);
  273 (* MOD *);
  274 (* SEMICOLON *);
  275 (* EOL *);
  276 (* DIM *);
  277 (* ANGLE *);
  278 (* IF *);
  279 (* THEN *);
  280 (* ELSE *);
  281 (* ASSIGN *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\003\000\003\000\004\000\004\000\
\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\003\000\002\000\003\000\
\003\000\003\000\006\000\003\000\001\000\003\000\001\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\004\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\002\000\018\000\000\000\016\000\000\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\014\000\019\000\022\000\020\000"

let yysindex = "\019\000\
\041\255\000\000\000\000\000\000\000\000\232\254\041\255\041\255\
\041\255\041\255\041\255\041\255\041\255\000\000\192\255\041\255\
\003\255\196\255\217\255\252\254\217\255\002\255\213\255\217\255\
\173\255\041\255\041\255\041\255\041\255\041\255\041\255\000\000\
\041\255\253\254\000\000\000\000\041\255\000\000\041\255\000\000\
\041\255\014\255\014\255\003\255\003\255\217\255\000\000\217\255\
\253\254\217\255\169\255\041\255\217\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\059\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\079\255\000\000\001\000\000\000\019\255\000\000\000\000\016\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\227\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\134\255\149\255\099\255\119\255\031\000\000\000\046\000\
\242\255\034\255\000\000\000\000\061\000"

let yygindex = "\000\000\
\000\000\255\255\000\000\248\255"

let yytablesize = 341
let yytable = "\015\000\
\016\000\026\000\027\000\028\000\029\000\017\000\018\000\036\000\
\021\000\023\000\024\000\025\000\030\000\037\000\034\000\038\000\
\039\000\033\000\030\000\001\000\028\000\029\000\047\000\033\000\
\042\000\043\000\044\000\045\000\046\000\030\000\000\000\048\000\
\021\000\021\000\033\000\049\000\000\000\050\000\000\000\051\000\
\000\000\003\000\004\000\005\000\006\000\000\000\007\000\022\000\
\022\000\008\000\053\000\009\000\000\000\010\000\000\000\000\000\
\000\000\011\000\000\000\000\000\012\000\000\000\013\000\006\000\
\006\000\006\000\006\000\000\000\006\000\000\000\006\000\000\000\
\006\000\006\000\006\000\006\000\006\000\006\000\000\000\006\000\
\000\000\006\000\006\000\013\000\013\000\013\000\013\000\000\000\
\013\000\000\000\013\000\000\000\013\000\013\000\000\000\013\000\
\013\000\013\000\000\000\000\000\000\000\013\000\013\000\009\000\
\009\000\009\000\009\000\000\000\009\000\000\000\009\000\000\000\
\009\000\009\000\000\000\009\000\009\000\009\000\000\000\000\000\
\000\000\009\000\009\000\012\000\012\000\012\000\012\000\000\000\
\012\000\000\000\012\000\000\000\012\000\012\000\000\000\012\000\
\012\000\012\000\007\000\007\000\000\000\012\000\012\000\007\000\
\000\000\007\000\000\000\007\000\007\000\000\000\007\000\007\000\
\007\000\008\000\008\000\000\000\007\000\007\000\008\000\000\000\
\008\000\000\000\008\000\008\000\000\000\008\000\008\000\008\000\
\000\000\000\000\000\000\008\000\008\000\026\000\027\000\028\000\
\029\000\026\000\027\000\028\000\029\000\000\000\000\000\000\000\
\030\000\000\000\031\000\000\000\030\000\033\000\031\000\000\000\
\052\000\033\000\000\000\041\000\026\000\027\000\028\000\029\000\
\026\000\027\000\028\000\029\000\000\000\035\000\000\000\030\000\
\000\000\031\000\032\000\030\000\033\000\031\000\000\000\000\000\
\033\000\026\000\027\000\028\000\029\000\026\000\027\000\028\000\
\029\000\000\000\000\000\000\000\030\000\040\000\031\000\000\000\
\030\000\033\000\031\000\000\000\020\000\033\000\020\000\000\000\
\020\000\020\000\000\000\020\000\020\000\020\000\000\000\000\000\
\000\000\020\000\020\000\024\000\000\000\024\000\000\000\024\000\
\024\000\000\000\024\000\024\000\024\000\000\000\000\000\000\000\
\024\000\024\000\023\000\000\000\023\000\000\000\023\000\023\000\
\000\000\023\000\000\000\023\000\000\000\000\000\000\000\023\000\
\023\000\015\000\000\000\015\000\000\000\015\000\015\000\000\000\
\015\000\000\000\015\000\000\000\000\000\000\000\015\000\015\000\
\010\000\000\000\010\000\000\000\010\000\010\000\000\000\010\000\
\000\000\010\000\000\000\000\000\000\000\010\000\010\000\014\000\
\000\000\014\000\000\000\014\000\014\000\000\000\014\000\000\000\
\014\000\000\000\000\000\000\000\014\000\014\000\019\000\000\000\
\019\000\000\000\019\000\019\000\000\000\019\000\000\000\019\000\
\000\000\000\000\000\000\019\000\019\000"

let yycheck = "\001\000\
\025\001\005\001\006\001\007\001\008\001\007\000\008\000\012\001\
\010\000\011\000\012\000\013\000\016\001\018\001\016\000\014\001\
\015\001\021\001\016\001\001\000\007\001\008\001\031\000\021\001\
\026\000\027\000\028\000\029\000\030\000\016\001\255\255\033\000\
\014\001\015\001\021\001\037\000\255\255\039\000\255\255\041\000\
\255\255\001\001\002\001\003\001\004\001\255\255\006\001\014\001\
\015\001\009\001\052\000\011\001\255\255\013\001\255\255\255\255\
\255\255\017\001\255\255\255\255\020\001\255\255\022\001\005\001\
\006\001\007\001\008\001\255\255\010\001\255\255\012\001\255\255\
\014\001\015\001\016\001\017\001\018\001\019\001\255\255\021\001\
\255\255\023\001\024\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\012\001\255\255\014\001\015\001\255\255\017\001\
\018\001\019\001\255\255\255\255\255\255\023\001\024\001\005\001\
\006\001\007\001\008\001\255\255\010\001\255\255\012\001\255\255\
\014\001\015\001\255\255\017\001\018\001\019\001\255\255\255\255\
\255\255\023\001\024\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\012\001\255\255\014\001\015\001\255\255\017\001\
\018\001\019\001\005\001\006\001\255\255\023\001\024\001\010\001\
\255\255\012\001\255\255\014\001\015\001\255\255\017\001\018\001\
\019\001\005\001\006\001\255\255\023\001\024\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\018\001\019\001\
\255\255\255\255\255\255\023\001\024\001\005\001\006\001\007\001\
\008\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\016\001\255\255\018\001\255\255\016\001\021\001\018\001\255\255\
\024\001\021\001\255\255\023\001\005\001\006\001\007\001\008\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\016\001\
\255\255\018\001\019\001\016\001\021\001\018\001\255\255\255\255\
\021\001\005\001\006\001\007\001\008\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\016\001\017\001\018\001\255\255\
\016\001\021\001\018\001\255\255\010\001\021\001\012\001\255\255\
\014\001\015\001\255\255\017\001\018\001\019\001\255\255\255\255\
\255\255\023\001\024\001\010\001\255\255\012\001\255\255\014\001\
\015\001\255\255\017\001\018\001\019\001\255\255\255\255\255\255\
\023\001\024\001\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\017\001\255\255\019\001\255\255\255\255\255\255\023\001\
\024\001\010\001\255\255\012\001\255\255\014\001\015\001\255\255\
\017\001\255\255\019\001\255\255\255\255\255\255\023\001\024\001\
\010\001\255\255\012\001\255\255\014\001\015\001\255\255\017\001\
\255\255\019\001\255\255\255\255\255\255\023\001\024\001\010\001\
\255\255\012\001\255\255\014\001\015\001\255\255\017\001\255\255\
\019\001\255\255\255\255\255\255\023\001\024\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\255\255\019\001\
\255\255\255\255\255\255\023\001\024\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  LBRACES\000\
  RBRACES\000\
  LBKT\000\
  RBKT\000\
  COMMA\000\
  DOT\000\
  MOD\000\
  SEMICOLON\000\
  EOL\000\
  DIM\000\
  ANGLE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ASSIGN\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 20 "parser.mly"
                            ( Ast.eval _1 )
# 252 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 23 "parser.mly"
                              ( _2 )
# 259 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 24 "parser.mly"
                              ( Ast.eval (Ast.Intex _1) )
# 266 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 25 "parser.mly"
                            ( Ast.eval (Ast.Fltex _1) )
# 273 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 26 "parser.mly"
                            ( Ast.eval (Ast.Boolex _1) )
# 280 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 27 "parser.mly"
                            ( Ast.eval (Ast.Varex _1) )
# 287 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
                              ( Ast.eval (Ast.Addex (_1, _3)) )
# 295 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
                              ( Ast.eval (Ast.Subex(_1, _3)) )
# 303 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                              ( Ast.eval (Ast.Mulex(_1, _3)) )
# 311 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                              ( Ast.eval (Ast.Dotprodex (_1, _3)) )
# 319 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 32 "parser.mly"
                              ( Ast.eval (Ast.Magex _2) )
# 326 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                              ( Ast.eval (Ast.Divex(_1, _3)) )
# 334 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                              ( Ast.eval (Ast.Subex(Ast.Fltex 0., _2)) )
# 341 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                              ( Ast.eval (Ast.Anglex(_1,_3)) )
# 349 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                              ( Ast.eval (Ast.Dimex _2) )
# 356 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elements) in
    Obj.repr(
# 37 "parser.mly"
                              ( Ast.eval (Ast.Vectex _2) )
# 363 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 38 "parser.mly"
                              ( Ast.eval (Ast.Seqex (_1::_3)))
# 371 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 39 "parser.mly"
                              ( Ast.eval (Ast.Seqex _2) )
# 378 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                                        ( Ast.eval (Ast.Cndex(_2, _4, _6)))
# 387 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                              ( Ast.eval (Ast.Letex (_1, _3)) )
# 395 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                            ( [Ast.eval _1] )
# 402 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 410 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 48 "parser.mly"
                            ( [Ast.eval _1] )
# 417 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 425 "parser.ml"
               : 'exprs))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
