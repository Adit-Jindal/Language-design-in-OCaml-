type token =
  | INT of (
# 1 "parser.mly"
        int
# 6 "parser.ml"
)
  | FLOAT of (
# 2 "parser.mly"
        float
# 11 "parser.ml"
)
  | BOOL of (
# 3 "parser.mly"
        bool
# 16 "parser.ml"
)
  | VAR of (
# 4 "parser.mly"
        string
# 21 "parser.ml"
)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LPAREN
  | RPAREN
  | LBRACES
  | RBRACES
  | UNDSC
  | LBKT
  | RBKT
  | COMMA
  | DOT
  | MOD
  | SEMICOLON
  | EQUALITY
  | LESS
  | MORE
  | EOL
  | DIM
  | ANGLE
  | PRIME
  | IF
  | THEN
  | ELSE
  | ASSIGN
  | FOR
  | WHILE

open Parsing
let _ = parse_error;;
let yytransl_const = [|
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* TIMES *);
  264 (* DIV *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* LBRACES *);
  268 (* RBRACES *);
  269 (* UNDSC *);
  270 (* LBKT *);
  271 (* RBKT *);
  272 (* COMMA *);
  273 (* DOT *);
  274 (* MOD *);
  275 (* SEMICOLON *);
  276 (* EQUALITY *);
  277 (* LESS *);
  278 (* MORE *);
  279 (* EOL *);
  280 (* DIM *);
  281 (* ANGLE *);
  282 (* PRIME *);
  283 (* IF *);
  284 (* THEN *);
  285 (* ELSE *);
  286 (* ASSIGN *);
  287 (* FOR *);
  288 (* WHILE *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\003\000\003\000\004\000\004\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\007\000\
\007\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\003\000\002\000\003\000\003\000\006\000\003\000\009\000\005\000\
\003\000\002\000\001\000\003\000\001\000\003\000\003\000\001\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\003\000\002\000\003\000\
\003\000\006\000\003\000\009\000\005\000\001\000\003\000\001\000\
\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\004\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\026\000\000\000\002\000\020\000\000\000\025\000\019\000\
\000\000\015\000\000\000\000\000\032\000\033\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\049\000\000\000\048\000\000\000\044\000\000\000\000\000\
\000\000\000\000\000\000\039\000\040\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\017\000\018\000\026\000\023\000\066\000\086\000\084\000"

let yysindex = "\021\000\
\096\255\000\000\000\000\000\000\000\000\250\254\096\255\096\255\
\096\255\096\255\096\255\096\255\096\255\096\255\028\255\032\255\
\000\000\091\000\096\255\000\000\113\000\193\000\021\255\135\000\
\193\000\005\255\157\000\193\000\043\000\096\255\115\255\096\255\
\096\255\096\255\096\255\096\255\096\255\096\255\096\255\000\000\
\096\255\000\000\193\000\000\000\000\000\096\255\000\000\000\000\
\096\255\000\000\096\255\164\000\000\000\000\000\000\000\013\255\
\115\255\115\255\115\255\115\255\115\255\115\255\115\255\037\255\
\057\255\215\000\082\255\082\255\000\000\000\000\074\000\119\000\
\119\000\119\000\074\000\193\000\193\000\053\255\115\255\115\255\
\000\000\221\000\068\001\026\255\068\001\088\255\242\000\068\001\
\067\000\096\255\115\255\115\255\115\255\115\255\115\255\115\255\
\115\255\115\255\115\255\115\255\115\255\096\255\249\000\068\001\
\000\000\000\000\115\255\000\000\115\255\000\000\115\255\186\000\
\014\001\104\255\104\255\000\000\000\000\068\001\003\255\089\001\
\089\001\089\001\003\255\193\000\115\255\068\001\068\001\037\000\
\115\255\115\255\020\001\115\255\041\001\068\001\115\255\068\001\
\115\255\068\001\062\001\115\255\068\001"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\143\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\050\255\000\000\000\000\
\116\255\000\000\000\000\184\002\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\204\002\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\168\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\193\255\218\255\000\000\000\000\140\001\240\001\
\004\002\024\002\160\001\052\255\119\255\000\000\000\000\000\000\
\000\000\000\000\065\255\000\000\121\255\000\000\000\000\044\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\064\002\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\243\255\012\000\000\000\000\000\084\002\100\001\180\001\
\200\001\220\001\120\001\224\002\000\000\068\255\125\255\000\000\
\000\000\000\000\000\000\000\000\000\000\104\002\000\000\124\002\
\000\000\144\002\000\000\000\000\164\002"

let yygindex = "\000\000\
\000\000\249\255\000\000\000\000\212\255\000\000\000\000"

let yytablesize = 1021
let yytable = "\020\000\
\021\000\022\000\024\000\025\000\027\000\028\000\029\000\092\000\
\093\000\094\000\095\000\043\000\081\000\082\000\083\000\085\000\
\087\000\088\000\089\000\048\000\049\000\001\000\052\000\019\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\045\000\075\000\103\000\104\000\030\000\106\000\076\000\046\000\
\031\000\077\000\080\000\078\000\107\000\090\000\113\000\114\000\
\115\000\116\000\117\000\118\000\119\000\120\000\121\000\122\000\
\123\000\032\000\033\000\034\000\035\000\029\000\126\000\030\000\
\127\000\091\000\128\000\000\000\029\000\036\000\030\000\000\000\
\037\000\038\000\039\000\000\000\056\000\041\000\042\000\057\000\
\131\000\102\000\112\000\056\000\133\000\134\000\057\000\136\000\
\034\000\035\000\138\000\000\000\139\000\000\000\124\000\141\000\
\003\000\004\000\005\000\006\000\000\000\007\000\108\000\109\000\
\008\000\000\000\009\000\000\000\010\000\011\000\094\000\095\000\
\000\000\012\000\000\000\053\000\054\000\055\000\056\000\013\000\
\057\000\000\000\014\000\058\000\000\000\059\000\015\000\016\000\
\060\000\000\000\027\000\027\000\061\000\028\000\028\000\054\000\
\054\000\000\000\062\000\055\000\055\000\063\000\000\000\000\000\
\000\000\064\000\065\000\006\000\006\000\006\000\006\000\000\000\
\006\000\000\000\006\000\006\000\000\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\000\000\006\000\
\006\000\000\000\006\000\006\000\035\000\035\000\035\000\035\000\
\000\000\035\000\000\000\035\000\035\000\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\000\000\
\035\000\035\000\000\000\035\000\035\000\008\000\008\000\000\000\
\000\000\000\000\008\000\000\000\008\000\008\000\000\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\000\000\008\000\008\000\000\000\008\000\008\000\009\000\009\000\
\000\000\000\000\000\000\009\000\000\000\009\000\009\000\000\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\000\000\009\000\009\000\000\000\009\000\009\000\037\000\
\037\000\000\000\000\000\000\000\037\000\000\000\037\000\037\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\000\000\037\000\037\000\000\000\037\000\037\000\
\038\000\038\000\000\000\000\000\000\000\038\000\000\000\038\000\
\038\000\000\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\038\000\000\000\038\000\038\000\000\000\038\000\
\038\000\092\000\093\000\094\000\095\000\000\000\000\000\032\000\
\033\000\034\000\035\000\000\000\000\000\097\000\000\000\000\000\
\098\000\099\000\100\000\036\000\000\000\101\000\037\000\038\000\
\039\000\132\000\000\000\041\000\042\000\000\000\051\000\092\000\
\093\000\094\000\095\000\000\000\000\000\000\000\032\000\033\000\
\034\000\035\000\000\000\097\000\000\000\000\000\098\000\099\000\
\100\000\000\000\000\000\101\000\000\000\000\000\111\000\032\000\
\033\000\034\000\035\000\042\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\000\000\000\000\037\000\038\000\
\039\000\040\000\000\000\041\000\042\000\032\000\033\000\034\000\
\035\000\000\000\044\000\032\000\033\000\034\000\035\000\000\000\
\000\000\036\000\000\000\000\000\037\000\038\000\039\000\036\000\
\000\000\041\000\042\000\032\000\033\000\034\000\035\000\041\000\
\042\000\000\000\000\000\047\000\000\000\000\000\000\000\036\000\
\000\000\000\000\037\000\038\000\039\000\000\000\000\000\041\000\
\042\000\032\000\033\000\034\000\035\000\000\000\000\000\000\000\
\032\000\033\000\034\000\035\000\000\000\036\000\050\000\000\000\
\037\000\038\000\039\000\079\000\036\000\041\000\042\000\037\000\
\038\000\039\000\000\000\000\000\041\000\042\000\032\000\033\000\
\034\000\035\000\000\000\000\000\000\000\032\000\033\000\034\000\
\035\000\129\000\036\000\000\000\000\000\037\000\038\000\039\000\
\000\000\036\000\041\000\042\000\037\000\038\000\039\000\000\000\
\000\000\041\000\042\000\092\000\093\000\094\000\095\000\000\000\
\096\000\092\000\093\000\094\000\095\000\000\000\105\000\097\000\
\000\000\000\000\098\000\099\000\100\000\097\000\000\000\101\000\
\098\000\099\000\100\000\000\000\000\000\101\000\092\000\093\000\
\094\000\095\000\000\000\000\000\000\000\092\000\093\000\094\000\
\095\000\000\000\097\000\110\000\000\000\098\000\099\000\100\000\
\125\000\097\000\101\000\000\000\098\000\099\000\100\000\000\000\
\000\000\101\000\092\000\093\000\094\000\095\000\000\000\130\000\
\092\000\093\000\094\000\095\000\000\000\135\000\097\000\000\000\
\000\000\098\000\099\000\100\000\097\000\000\000\101\000\098\000\
\099\000\100\000\000\000\000\000\101\000\092\000\093\000\094\000\
\095\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\137\000\097\000\000\000\000\000\098\000\099\000\100\000\000\000\
\000\000\101\000\092\000\093\000\094\000\095\000\000\000\140\000\
\092\000\093\000\094\000\095\000\000\000\000\000\097\000\000\000\
\000\000\098\000\099\000\100\000\097\000\000\000\101\000\098\000\
\099\000\100\000\000\000\000\000\101\000\092\000\093\000\094\000\
\095\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\097\000\000\000\000\000\000\000\036\000\000\000\036\000\
\036\000\101\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\000\000\036\000\036\000\000\000\036\000\
\036\000\046\000\000\000\046\000\046\000\000\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\000\000\
\046\000\046\000\000\000\046\000\046\000\007\000\000\000\007\000\
\007\000\000\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\000\000\007\000\000\000\000\000\007\000\
\007\000\017\000\000\000\017\000\017\000\000\000\017\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\017\000\000\000\
\017\000\000\000\000\000\017\000\017\000\041\000\000\000\041\000\
\041\000\000\000\041\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\000\000\000\000\041\000\000\000\041\000\
\041\000\042\000\000\000\042\000\042\000\000\000\042\000\042\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\000\000\
\000\000\042\000\000\000\042\000\042\000\043\000\000\000\043\000\
\043\000\000\000\043\000\043\000\000\000\043\000\043\000\043\000\
\043\000\043\000\043\000\000\000\000\000\043\000\000\000\043\000\
\043\000\012\000\000\000\012\000\012\000\000\000\012\000\012\000\
\000\000\012\000\012\000\012\000\012\000\012\000\012\000\000\000\
\000\000\000\000\000\000\012\000\012\000\013\000\000\000\013\000\
\013\000\000\000\013\000\013\000\000\000\013\000\013\000\013\000\
\013\000\013\000\013\000\000\000\000\000\000\000\000\000\013\000\
\013\000\014\000\000\000\014\000\014\000\000\000\014\000\014\000\
\000\000\014\000\014\000\014\000\014\000\014\000\014\000\000\000\
\000\000\000\000\000\000\014\000\014\000\047\000\000\000\047\000\
\047\000\000\000\047\000\047\000\000\000\047\000\047\000\000\000\
\000\000\000\000\047\000\000\000\000\000\047\000\000\000\047\000\
\047\000\051\000\000\000\051\000\051\000\000\000\051\000\051\000\
\000\000\051\000\051\000\000\000\000\000\000\000\051\000\000\000\
\000\000\051\000\000\000\051\000\051\000\024\000\000\000\024\000\
\024\000\000\000\024\000\024\000\000\000\024\000\024\000\000\000\
\000\000\000\000\024\000\000\000\000\000\024\000\000\000\024\000\
\024\000\053\000\000\000\053\000\053\000\000\000\053\000\053\000\
\000\000\053\000\053\000\000\000\000\000\000\000\053\000\000\000\
\000\000\053\000\000\000\053\000\053\000\050\000\000\000\050\000\
\050\000\000\000\050\000\050\000\000\000\050\000\050\000\000\000\
\000\000\000\000\050\000\000\000\000\000\050\000\000\000\050\000\
\050\000\023\000\000\000\023\000\023\000\000\000\023\000\023\000\
\000\000\023\000\023\000\000\000\000\000\000\000\023\000\000\000\
\000\000\023\000\000\000\023\000\023\000\052\000\000\000\052\000\
\052\000\000\000\052\000\052\000\000\000\052\000\052\000\000\000\
\000\000\000\000\052\000\000\000\000\000\052\000\000\000\052\000\
\052\000\018\000\000\000\018\000\018\000\000\000\018\000\018\000\
\000\000\018\000\018\000\000\000\000\000\000\000\018\000\000\000\
\000\000\000\000\000\000\018\000\018\000\022\000\000\000\022\000\
\022\000\000\000\022\000\022\000\000\000\022\000\022\000\000\000\
\000\000\000\000\022\000\000\000\000\000\000\000\000\000\022\000\
\022\000\021\000\000\000\021\000\021\000\000\000\021\000\021\000\
\000\000\021\000\021\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\021\000\021\000"

let yycheck = "\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\014\000\005\001\
\006\001\007\001\008\001\019\000\057\000\058\000\059\000\060\000\
\061\000\062\000\063\000\015\001\016\001\001\000\030\000\030\001\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\012\001\041\000\079\000\080\000\009\001\012\001\046\000\019\001\
\009\001\049\000\030\001\051\000\019\001\009\001\091\000\092\000\
\093\000\094\000\095\000\096\000\097\000\098\000\099\000\100\000\
\101\000\005\001\006\001\007\001\008\001\012\001\107\000\012\001\
\109\000\009\001\111\000\255\255\019\001\017\001\019\001\255\255\
\020\001\021\001\022\001\255\255\012\001\025\001\026\001\012\001\
\125\000\029\001\090\000\019\001\129\000\130\000\019\001\132\000\
\007\001\008\001\135\000\255\255\137\000\255\255\102\000\140\000\
\001\001\002\001\003\001\004\001\255\255\006\001\015\001\016\001\
\009\001\255\255\011\001\255\255\013\001\014\001\007\001\008\001\
\255\255\018\001\255\255\001\001\002\001\003\001\004\001\024\001\
\006\001\255\255\027\001\009\001\255\255\011\001\031\001\032\001\
\014\001\255\255\015\001\016\001\018\001\015\001\016\001\015\001\
\016\001\255\255\024\001\015\001\016\001\027\001\255\255\255\255\
\255\255\031\001\032\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\012\001\013\001\255\255\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\023\001\255\255\025\001\
\026\001\255\255\028\001\029\001\005\001\006\001\007\001\008\001\
\255\255\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\028\001\029\001\005\001\006\001\255\255\
\255\255\255\255\010\001\255\255\012\001\013\001\255\255\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\025\001\026\001\255\255\028\001\029\001\005\001\006\001\
\255\255\255\255\255\255\010\001\255\255\012\001\013\001\255\255\
\015\001\016\001\017\001\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\025\001\026\001\255\255\028\001\029\001\005\001\
\006\001\255\255\255\255\255\255\010\001\255\255\012\001\013\001\
\255\255\015\001\016\001\017\001\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\255\255\028\001\029\001\
\005\001\006\001\255\255\255\255\255\255\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\028\001\
\029\001\005\001\006\001\007\001\008\001\255\255\255\255\005\001\
\006\001\007\001\008\001\255\255\255\255\017\001\255\255\255\255\
\020\001\021\001\022\001\017\001\255\255\025\001\020\001\021\001\
\022\001\029\001\255\255\025\001\026\001\255\255\028\001\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\005\001\006\001\
\007\001\008\001\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\255\255\255\255\025\001\255\255\255\255\028\001\005\001\
\006\001\007\001\008\001\026\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\017\001\255\255\255\255\020\001\021\001\
\022\001\023\001\255\255\025\001\026\001\005\001\006\001\007\001\
\008\001\255\255\010\001\005\001\006\001\007\001\008\001\255\255\
\255\255\017\001\255\255\255\255\020\001\021\001\022\001\017\001\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\025\001\
\026\001\255\255\255\255\013\001\255\255\255\255\255\255\017\001\
\255\255\255\255\020\001\021\001\022\001\255\255\255\255\025\001\
\026\001\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\005\001\006\001\007\001\008\001\255\255\017\001\018\001\255\255\
\020\001\021\001\022\001\016\001\017\001\025\001\026\001\020\001\
\021\001\022\001\255\255\255\255\025\001\026\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\016\001\017\001\255\255\255\255\020\001\021\001\022\001\
\255\255\017\001\025\001\026\001\020\001\021\001\022\001\255\255\
\255\255\025\001\026\001\005\001\006\001\007\001\008\001\255\255\
\010\001\005\001\006\001\007\001\008\001\255\255\010\001\017\001\
\255\255\255\255\020\001\021\001\022\001\017\001\255\255\025\001\
\020\001\021\001\022\001\255\255\255\255\025\001\005\001\006\001\
\007\001\008\001\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\017\001\018\001\255\255\020\001\021\001\022\001\
\016\001\017\001\025\001\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\005\001\006\001\007\001\008\001\255\255\010\001\
\005\001\006\001\007\001\008\001\255\255\010\001\017\001\255\255\
\255\255\020\001\021\001\022\001\017\001\255\255\025\001\020\001\
\021\001\022\001\255\255\255\255\025\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\017\001\255\255\255\255\020\001\021\001\022\001\255\255\
\255\255\025\001\005\001\006\001\007\001\008\001\255\255\010\001\
\005\001\006\001\007\001\008\001\255\255\255\255\017\001\255\255\
\255\255\020\001\021\001\022\001\017\001\255\255\025\001\020\001\
\021\001\022\001\255\255\255\255\025\001\005\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\017\001\255\255\255\255\255\255\010\001\255\255\012\001\
\013\001\025\001\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\026\001\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\026\001\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\017\001\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\025\001\255\255\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\017\001\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\025\001\255\255\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\026\001\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\026\001\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\026\001\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\026\001\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\026\001\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\028\001\029\001\010\001\255\255\012\001\
\013\001\255\255\015\001\016\001\255\255\018\001\019\001\255\255\
\255\255\255\255\023\001\255\255\255\255\255\255\255\255\028\001\
\029\001\010\001\255\255\012\001\013\001\255\255\015\001\016\001\
\255\255\018\001\019\001\255\255\255\255\255\255\023\001\255\255\
\255\255\255\255\255\255\028\001\029\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  LBRACES\000\
  RBRACES\000\
  UNDSC\000\
  LBKT\000\
  RBKT\000\
  COMMA\000\
  DOT\000\
  MOD\000\
  SEMICOLON\000\
  EQUALITY\000\
  LESS\000\
  MORE\000\
  EOL\000\
  DIM\000\
  ANGLE\000\
  PRIME\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ASSIGN\000\
  FOR\000\
  WHILE\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
                            ( Ast.eval _1 )
# 484 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                              ( _2 )
# 491 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 32 "parser.mly"
                              ( Ast.eval (Ast.Intex _1) )
# 498 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 33 "parser.mly"
                            ( Ast.eval (Ast.Fltex _1) )
# 505 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 34 "parser.mly"
                            ( Ast.eval (Ast.Boolex _1) )
# 512 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 35 "parser.mly"
                            ( Ast.eval (Ast.Varex _1) )
# 519 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                              ( Ast.eval (Ast.Dotprodex (_1, _3)) )
# 527 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                              ( Ast.eval (Ast.Addex (_1, _3)) )
# 535 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                              ( Ast.eval (Ast.Subex(_1, _3)) )
# 543 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                              ( Ast.eval (Ast.Mulex(_1, _3)) )
# 551 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                              ( Ast.eval (Ast.Divex(_1, _3)) )
# 559 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                              ( (Ast.Equex(_1,_3)) )
# 567 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "parser.mly"
                              ( (Ast.Lessex(_1, _3)) )
# 575 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                              ( (Ast.Morex(_1, _3)) )
# 583 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                              ( Ast.eval (Ast.Magex _2) )
# 590 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                              ( Ast.eval (Ast.Subex(Ast.Fltex 0., _2)) )
# 597 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                              ( Ast.eval (Ast.Anglex(_1,_3)) )
# 605 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                              ( Ast.eval (Ast.Dimex _2) )
# 612 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elements) in
    Obj.repr(
# 48 "parser.mly"
                              ( Ast.eval (Ast.Vectex _2) )
# 619 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 49 "parser.mly"
                                        ( Ast.eval (Ast.Seqex _2))
# 626 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                                        ( Ast.eval (Ast.Cndex(_2, _4, _6)))
# 635 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                              ( Ast.eval (Ast.Letex (_1, _3)) )
# 643 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 52 "parser.mly"
                                                          ( Ast.eval (Ast.Forex(_3, _5, _7, _9)) )
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 53 "parser.mly"
                                                          ( Ast.eval (Ast.Forex(_3, _3, _5, Ast.Seqex [])) )
# 661 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 54 "parser.mly"
                              ( Ast.eval (Ast.Transex _2) )
# 668 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                              ( Ast.eval (Ast.Invex _1) )
# 675 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                            ( [Ast.eval _1] )
# 682 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 690 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                            ( [Ast.eval _1] )
# 697 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 705 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 66 "parser.mly"
                             ( _2 )
# 712 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 67 "parser.mly"
                              ( (Ast.Intex _1) )
# 719 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 68 "parser.mly"
                            ( (Ast.Fltex _1) )
# 726 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 69 "parser.mly"
                            ( (Ast.Boolex _1) )
# 733 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 70 "parser.mly"
                            ( (Ast.Varex _1) )
# 740 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 71 "parser.mly"
                            ( (Ast.Dotprodex (_1, _3)) )
# 748 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 72 "parser.mly"
                            ( (Ast.Addex (_1, _3)) )
# 756 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 73 "parser.mly"
                            ( (Ast.Subex(_1, _3)) )
# 764 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 74 "parser.mly"
                            ( (Ast.Mulex(_1, _3)) )
# 772 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 75 "parser.mly"
                            ( (Ast.Divex(_1, _3)) )
# 780 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 76 "parser.mly"
                            ( (Ast.Equex(_1,_3)) )
# 788 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 77 "parser.mly"
                            ( (Ast.Lessex(_1, _3)) )
# 796 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 78 "parser.mly"
                            ( (Ast.Morex(_1, _3)) )
# 804 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmd) in
    Obj.repr(
# 79 "parser.mly"
                             ( (Ast.Magex _2) )
# 811 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 80 "parser.mly"
                             ( (Ast.Subex(Ast.Fltex 0., _2)) )
# 818 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 81 "parser.mly"
                             ( (Ast.Anglex(_1,_3)) )
# 826 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 82 "parser.mly"
                             ( (Ast.Dimex _2) )
# 833 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmdelements) in
    Obj.repr(
# 83 "parser.mly"
                                 ( (Ast.Vectex _2) )
# 840 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'cmds) in
    Obj.repr(
# 84 "parser.mly"
                                       ( (Ast.Seqex _2))
# 847 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 85 "parser.mly"
                                     ( (Ast.Cndex(_2, _4, _6)))
# 856 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 86 "parser.mly"
                             ( (Ast.Letex (_1, _3)) )
# 864 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'cmd) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 87 "parser.mly"
                                                          ( (Ast.Forex(_3, _5, _7, _9)) )
# 874 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'cmd) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 88 "parser.mly"
                                                          ( (Ast.Forex(_3, _3, _5, Ast.Seqex [])) )
# 882 "parser.ml"
               : 'cmd))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 91 "parser.mly"
                              ( [_1] )
# 889 "parser.ml"
               : 'cmdelements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmdelements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 92 "parser.mly"
                              ( _1 @ [_3] )
# 897 "parser.ml"
               : 'cmdelements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 94 "parser.mly"
                          ( [_1] )
# 904 "parser.ml"
               : 'cmds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'cmds) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'cmd) in
    Obj.repr(
# 95 "parser.mly"
                          ( _1 @ [_3] )
# 912 "parser.ml"
               : 'cmds))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
