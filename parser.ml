type token =
  | INT of (
# 1 "parser.mly"
        int
# 6 "parser.ml"
)
  | FLOAT of (
# 2 "parser.mly"
        float
# 11 "parser.ml"
)
  | BOOL of (
# 3 "parser.mly"
        bool
# 16 "parser.ml"
)
  | VAR of (
# 4 "parser.mly"
        string
# 21 "parser.ml"
)
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | LPAREN
  | RPAREN
  | LBRACES
  | RBRACES
  | LBKT
  | RBKT
  | COMMA
  | DOT
  | MOD
  | SEMICOLON
  | EQUALITY
  | EOL
  | DIM
  | ANGLE
  | IF
  | THEN
  | ELSE
  | ASSIGN
  | FOR

open Parsing
let _ = parse_error;;
let yytransl_const = [|
  261 (* PLUS *);
  262 (* MINUS *);
  263 (* TIMES *);
  264 (* DIV *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* LBRACES *);
  268 (* RBRACES *);
  269 (* LBKT *);
  270 (* RBKT *);
  271 (* COMMA *);
  272 (* DOT *);
  273 (* MOD *);
  274 (* SEMICOLON *);
  275 (* EQUALITY *);
  276 (* EOL *);
  277 (* DIM *);
  278 (* ANGLE *);
  279 (* IF *);
  280 (* THEN *);
  281 (* ELSE *);
  282 (* ASSIGN *);
  283 (* FOR *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* FLOAT *);
  259 (* BOOL *);
  260 (* VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\004\000\004\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\003\000\002\000\
\003\000\003\000\003\000\006\000\003\000\009\000\001\000\003\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\003\000\004\000\005\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\001\000\000\000\000\000\002\000\019\000\000\000\
\017\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\020\000\023\000\021\000"

let yysindex = "\017\000\
\043\255\000\000\000\000\000\000\000\000\233\254\043\255\043\255\
\043\255\043\255\043\255\043\255\043\255\033\255\000\000\228\255\
\043\255\254\254\233\255\002\000\003\255\002\000\036\255\251\255\
\002\000\208\255\043\255\043\255\043\255\043\255\043\255\043\255\
\043\255\043\255\000\000\043\255\018\255\000\000\000\000\043\255\
\000\000\043\255\000\000\043\255\242\254\136\000\136\000\254\254\
\254\254\002\000\000\000\002\000\002\000\018\255\002\000\203\255\
\043\255\043\255\004\255\002\000\043\255\251\254\043\255\030\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\066\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\108\255\000\000\045\000\000\000\044\255\000\000\000\000\
\061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\166\255\182\255\129\255\
\150\255\077\000\000\000\093\000\109\000\029\000\047\255\000\000\
\000\000\000\000\000\000\125\000\000\000\000\000\000\000\087\255"

let yygindex = "\000\000\
\000\000\255\255\000\000\231\255"

let yytablesize = 414
let yytable = "\016\000\
\057\000\045\000\017\000\040\000\063\000\018\000\019\000\051\000\
\022\000\024\000\025\000\026\000\040\000\032\000\039\000\037\000\
\034\000\001\000\061\000\036\000\040\000\040\000\028\000\029\000\
\030\000\031\000\046\000\047\000\048\000\049\000\050\000\059\000\
\052\000\032\000\053\000\062\000\034\000\064\000\054\000\036\000\
\055\000\027\000\056\000\003\000\004\000\005\000\006\000\040\000\
\007\000\041\000\042\000\008\000\000\000\009\000\000\000\010\000\
\060\000\023\000\023\000\011\000\024\000\024\000\000\000\012\000\
\000\000\013\000\000\000\000\000\000\000\014\000\006\000\006\000\
\006\000\006\000\000\000\006\000\000\000\006\000\000\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\000\000\006\000\
\000\000\006\000\006\000\022\000\022\000\022\000\022\000\000\000\
\022\000\000\000\022\000\000\000\022\000\022\000\022\000\022\000\
\000\000\022\000\022\000\000\000\022\000\000\000\022\000\022\000\
\014\000\014\000\014\000\014\000\000\000\014\000\000\000\014\000\
\000\000\014\000\014\000\000\000\014\000\014\000\000\000\014\000\
\000\000\000\000\000\000\014\000\014\000\009\000\009\000\009\000\
\009\000\000\000\009\000\000\000\009\000\000\000\009\000\009\000\
\000\000\009\000\009\000\000\000\009\000\000\000\000\000\000\000\
\009\000\009\000\013\000\013\000\013\000\013\000\000\000\013\000\
\000\000\013\000\000\000\013\000\013\000\000\000\013\000\013\000\
\000\000\013\000\007\000\007\000\000\000\013\000\013\000\007\000\
\000\000\007\000\000\000\007\000\007\000\000\000\007\000\007\000\
\000\000\007\000\008\000\008\000\000\000\007\000\007\000\008\000\
\000\000\008\000\000\000\008\000\008\000\000\000\008\000\008\000\
\000\000\008\000\000\000\000\000\000\000\008\000\008\000\028\000\
\029\000\030\000\031\000\000\000\028\000\029\000\030\000\031\000\
\000\000\000\000\032\000\000\000\033\000\034\000\000\000\032\000\
\036\000\033\000\034\000\058\000\000\000\036\000\000\000\044\000\
\028\000\029\000\030\000\031\000\000\000\028\000\029\000\030\000\
\031\000\000\000\038\000\032\000\000\000\033\000\034\000\035\000\
\032\000\036\000\033\000\034\000\000\000\000\000\036\000\028\000\
\029\000\030\000\031\000\000\000\000\000\000\000\028\000\029\000\
\030\000\031\000\032\000\043\000\033\000\034\000\000\000\000\000\
\036\000\032\000\000\000\033\000\034\000\000\000\021\000\036\000\
\021\000\000\000\021\000\021\000\000\000\021\000\021\000\000\000\
\021\000\000\000\000\000\000\000\021\000\021\000\026\000\000\000\
\026\000\000\000\026\000\026\000\000\000\026\000\026\000\000\000\
\026\000\000\000\000\000\000\000\026\000\026\000\025\000\000\000\
\025\000\000\000\025\000\025\000\000\000\025\000\000\000\000\000\
\025\000\000\000\000\000\000\000\025\000\025\000\016\000\000\000\
\016\000\000\000\016\000\016\000\000\000\016\000\000\000\000\000\
\016\000\000\000\000\000\000\000\016\000\016\000\010\000\000\000\
\010\000\000\000\010\000\010\000\000\000\010\000\000\000\000\000\
\010\000\000\000\000\000\000\000\010\000\010\000\011\000\000\000\
\011\000\000\000\011\000\011\000\000\000\011\000\000\000\000\000\
\011\000\000\000\000\000\000\000\011\000\011\000\015\000\000\000\
\015\000\000\000\015\000\015\000\000\000\015\000\000\000\000\000\
\015\000\000\000\000\000\000\000\015\000\015\000\020\000\000\000\
\020\000\000\000\020\000\020\000\000\000\020\000\030\000\031\000\
\020\000\000\000\000\000\000\000\020\000\020\000\000\000\032\000\
\000\000\000\000\034\000\000\000\000\000\036\000"

let yycheck = "\001\000\
\015\001\027\000\026\001\018\001\010\001\007\000\008\000\033\000\
\010\000\011\000\012\000\013\000\018\001\016\001\012\001\017\000\
\019\001\001\000\015\001\022\001\018\001\018\001\005\001\006\001\
\007\001\008\001\028\000\029\000\030\000\031\000\032\000\057\000\
\034\000\016\001\036\000\061\000\019\001\063\000\040\000\022\001\
\042\000\009\001\044\000\001\001\002\001\003\001\004\001\018\001\
\006\001\014\001\015\001\009\001\255\255\011\001\255\255\013\001\
\058\000\014\001\015\001\017\001\014\001\015\001\255\255\021\001\
\255\255\023\001\255\255\255\255\255\255\027\001\005\001\006\001\
\007\001\008\001\255\255\010\001\255\255\012\001\255\255\014\001\
\015\001\016\001\017\001\018\001\019\001\020\001\255\255\022\001\
\255\255\024\001\025\001\005\001\006\001\007\001\008\001\255\255\
\010\001\255\255\012\001\255\255\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\022\001\255\255\024\001\025\001\
\005\001\006\001\007\001\008\001\255\255\010\001\255\255\012\001\
\255\255\014\001\015\001\255\255\017\001\018\001\255\255\020\001\
\255\255\255\255\255\255\024\001\025\001\005\001\006\001\007\001\
\008\001\255\255\010\001\255\255\012\001\255\255\014\001\015\001\
\255\255\017\001\018\001\255\255\020\001\255\255\255\255\255\255\
\024\001\025\001\005\001\006\001\007\001\008\001\255\255\010\001\
\255\255\012\001\255\255\014\001\015\001\255\255\017\001\018\001\
\255\255\020\001\005\001\006\001\255\255\024\001\025\001\010\001\
\255\255\012\001\255\255\014\001\015\001\255\255\017\001\018\001\
\255\255\020\001\005\001\006\001\255\255\024\001\025\001\010\001\
\255\255\012\001\255\255\014\001\015\001\255\255\017\001\018\001\
\255\255\020\001\255\255\255\255\255\255\024\001\025\001\005\001\
\006\001\007\001\008\001\255\255\005\001\006\001\007\001\008\001\
\255\255\255\255\016\001\255\255\018\001\019\001\255\255\016\001\
\022\001\018\001\019\001\025\001\255\255\022\001\255\255\024\001\
\005\001\006\001\007\001\008\001\255\255\005\001\006\001\007\001\
\008\001\255\255\010\001\016\001\255\255\018\001\019\001\020\001\
\016\001\022\001\018\001\019\001\255\255\255\255\022\001\005\001\
\006\001\007\001\008\001\255\255\255\255\255\255\005\001\006\001\
\007\001\008\001\016\001\017\001\018\001\019\001\255\255\255\255\
\022\001\016\001\255\255\018\001\019\001\255\255\010\001\022\001\
\012\001\255\255\014\001\015\001\255\255\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\018\001\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\255\255\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\255\255\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\255\255\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\255\255\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\255\255\255\255\
\020\001\255\255\255\255\255\255\024\001\025\001\010\001\255\255\
\012\001\255\255\014\001\015\001\255\255\017\001\007\001\008\001\
\020\001\255\255\255\255\255\255\024\001\025\001\255\255\016\001\
\255\255\255\255\019\001\255\255\255\255\022\001"

let yynames_const = "\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  LPAREN\000\
  RPAREN\000\
  LBRACES\000\
  RBRACES\000\
  LBKT\000\
  RBKT\000\
  COMMA\000\
  DOT\000\
  MOD\000\
  SEMICOLON\000\
  EQUALITY\000\
  EOL\000\
  DIM\000\
  ANGLE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  ASSIGN\000\
  FOR\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  BOOL\000\
  VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 20 "parser.mly"
                            ( Ast.eval _1 )
# 279 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 23 "parser.mly"
                              ( _2 )
# 286 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 24 "parser.mly"
                              ( Ast.eval (Ast.Intex _1) )
# 293 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 25 "parser.mly"
                            ( Ast.eval (Ast.Fltex _1) )
# 300 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 26 "parser.mly"
                            ( Ast.eval (Ast.Boolex _1) )
# 307 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 27 "parser.mly"
                            ( Ast.eval (Ast.Varex _1) )
# 314 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 28 "parser.mly"
                              ( Ast.eval (Ast.Addex (_1, _3)) )
# 322 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 29 "parser.mly"
                              ( Ast.eval (Ast.Subex(_1, _3)) )
# 330 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 30 "parser.mly"
                              ( Ast.eval (Ast.Mulex(_1, _3)) )
# 338 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                              ( Ast.eval (Ast.Dotprodex (_1, _3)) )
# 346 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 32 "parser.mly"
                              ( (Ast.Equex(_1,_3)) )
# 354 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 33 "parser.mly"
                              ( Ast.eval (Ast.Magex _2) )
# 361 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 34 "parser.mly"
                              ( Ast.eval (Ast.Divex(_1, _3)) )
# 369 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                              ( Ast.eval (Ast.Subex(Ast.Fltex 0., _2)) )
# 376 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                              ( Ast.eval (Ast.Anglex(_1,_3)) )
# 384 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                              ( Ast.eval (Ast.Dimex _2) )
# 391 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'elements) in
    Obj.repr(
# 38 "parser.mly"
                              ( Ast.eval (Ast.Vectex _2) )
# 398 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 39 "parser.mly"
                              ( Ast.eval (Ast.Seqex (_1::_3)))
# 406 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exprs) in
    Obj.repr(
# 40 "parser.mly"
                              ( Ast.eval (Ast.Seqex _2) )
# 413 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                                        ( Ast.eval (Ast.Cndex(_2, _4, _6)))
# 422 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "parser.mly"
                              ( Ast.eval (Ast.Letex (_1, _3)) )
# 430 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'exprs) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'exprs) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'exprs) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'exprs) in
    Obj.repr(
# 43 "parser.mly"
                                                                 ( Ast.eval (Ast.Forex(Ast.Seqex _3, Ast.Seqex _5, Ast.Seqex _7, Ast.Seqex _9)) )
# 440 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 46 "parser.mly"
                            ( [Ast.eval _1] )
# 447 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elements) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 47 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 455 "parser.ml"
               : 'elements))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 50 "parser.mly"
                            ( [Ast.eval _1] )
# 462 "parser.ml"
               : 'exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exprs) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                            ( _1 @ [Ast.eval _3] )
# 470 "parser.ml"
               : 'exprs))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
